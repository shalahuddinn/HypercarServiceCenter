<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="16" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <HyperskillCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="Web services are particularly useful when it comes to structuring and organizing things. What needs structure more than a crowd of waiting customers? With the help of Django, you'll implement an application that manages the line at a car service center.&lt;br/&gt;&lt;br/&gt;Learn more at &lt;a href=&quot;https://hyperskill.org&quot;&gt;https://hyperskill.org/projects/85&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="Python" />
          <option name="languageCode" value="en" />
          <option name="name" value="Hypercar Service Center" />
          <option name="stages">
            <list>
              <HyperskillStage>
                <option name="id" value="470" />
                <option name="stepId" value="7694" />
                <option name="title" value="Welcome" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="471" />
                <option name="stepId" value="7695" />
                <option name="title" value="Customer menu" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="472" />
                <option name="stepId" value="7696" />
                <option name="title" value="Electronic queue" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="473" />
                <option name="stepId" value="7697" />
                <option name="title" value="Operator menu" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="474" />
                <option name="stepId" value="7698" />
                <option name="title" value="Next, please!" />
              </HyperskillStage>
            </list>
          </option>
          <option name="taskToTopics">
            <map>
              <entry key="0">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="117" />
                      <option name="theoryId" value="3614" />
                      <option name="title" value="Introduction to OOP" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="157" />
                      <option name="theoryId" value="3611" />
                      <option name="title" value="The concept of patterns" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="493" />
                      <option name="theoryId" value="6701" />
                      <option name="title" value="Frameworks" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="485" />
                      <option name="theoryId" value="6633" />
                      <option name="title" value="World Wide Web" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="479" />
                      <option name="theoryId" value="6569" />
                      <option name="title" value="HyperText Transfer Protocol" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="494" />
                      <option name="theoryId" value="6740" />
                      <option name="title" value="HTTP URL" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="495" />
                      <option name="theoryId" value="6752" />
                      <option name="title" value="HTTP messages" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="577" />
                      <option name="theoryId" value="7580" />
                      <option name="title" value="Regexps basics" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="708" />
                      <option name="theoryId" value="8739" />
                      <option name="title" value="Computer programming" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="709" />
                      <option name="theoryId" value="8742" />
                      <option name="title" value="Intro to computational thinking" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="711" />
                      <option name="theoryId" value="8745" />
                      <option name="title" value="Components of computational thinking" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="259" />
                      <option name="theoryId" value="3805" />
                      <option name="title" value="IDE" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="333" />
                      <option name="theoryId" value="5204" />
                      <option name="title" value="Introduction to Python" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="336" />
                      <option name="theoryId" value="5208" />
                      <option name="title" value="Overview of the basic program" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="335" />
                      <option name="theoryId" value="5233" />
                      <option name="title" value="Multi-line programs" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="418" />
                      <option name="theoryId" value="6047" />
                      <option name="title" value="Program execution" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="402" />
                      <option name="theoryId" value="5879" />
                      <option name="title" value="PEP 8" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="403" />
                      <option name="theoryId" value="6081" />
                      <option name="title" value="Comments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="397" />
                      <option name="theoryId" value="5885" />
                      <option name="title" value="Naming variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="404" />
                      <option name="theoryId" value="5913" />
                      <option name="title" value="Taking input" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="1">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="887" />
                      <option name="theoryId" value="9844" />
                      <option name="title" value="Inheritance" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="910" />
                      <option name="theoryId" value="10027" />
                      <option name="title" value="Polymorphism" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="608" />
                      <option name="theoryId" value="7929" />
                      <option name="title" value="Immutability" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="348" />
                      <option name="theoryId" value="5504" />
                      <option name="title" value="Bugs and debugging" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="633" />
                      <option name="theoryId" value="8133" />
                      <option name="title" value="Introduction to Python shell" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="435" />
                      <option name="theoryId" value="6189" />
                      <option name="title" value="Indexes" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="564" />
                      <option name="theoryId" value="7462" />
                      <option name="title" value="Tuple" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="534" />
                      <option name="theoryId" value="7248" />
                      <option name="title" value="Arguments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="416" />
                      <option name="theoryId" value="6031" />
                      <option name="title" value="Operations with list" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="949" />
                      <option name="theoryId" value="10295" />
                      <option name="title" value="Default arguments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="685" />
                      <option name="theoryId" value="8560" />
                      <option name="title" value="Args" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="853" />
                      <option name="theoryId" value="9544" />
                      <option name="title" value="Kwargs" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="646" />
                      <option name="theoryId" value="8238" />
                      <option name="title" value="Experiments with Python shell" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="511" />
                      <option name="theoryId" value="6981" />
                      <option name="title" value="Methods and attributes" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="530" />
                      <option name="theoryId" value="7139" />
                      <option name="title" value="Magic methods" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="533" />
                      <option name="theoryId" value="7235" />
                      <option name="title" value="Inheritance" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="566" />
                      <option name="theoryId" value="7629" />
                      <option name="title" value="Method overriding" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="547" />
                      <option name="theoryId" value="7324" />
                      <option name="title" value="Datetime module" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="647" />
                      <option name="theoryId" value="8244" />
                      <option name="title" value="Debugging in shell" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="467" />
                      <option name="theoryId" value="6391" />
                      <option name="title" value="Django template language" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="2">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="266" />
                      <option name="theoryId" value="4953" />
                      <option name="title" value="Computer algorithms" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="953" />
                      <option name="theoryId" value="10336" />
                      <option name="title" value="Introducing the first algorithm" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="263" />
                      <option name="theoryId" value="4991" />
                      <option name="title" value="The big O notation" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="267" />
                      <option name="theoryId" value="5161" />
                      <option name="title" value="Data structures" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="318" />
                      <option name="theoryId" value="5252" />
                      <option name="title" value="Stack" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="343" />
                      <option name="theoryId" value="5350" />
                      <option name="title" value="Queue" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="345" />
                      <option name="theoryId" value="5356" />
                      <option name="title" value="Deque" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="599" />
                      <option name="theoryId" value="7834" />
                      <option name="title" value="REST" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="503" />
                      <option name="theoryId" value="6854" />
                      <option name="title" value="JSON" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="673" />
                      <option name="theoryId" value="8512" />
                      <option name="title" value="Postman" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="740" />
                      <option name="theoryId" value="8956" />
                      <option name="title" value="Design principles" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="454" />
                      <option name="theoryId" value="6315" />
                      <option name="title" value="List comprehension" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="546" />
                      <option name="theoryId" value="7316" />
                      <option name="title" value="Algorithms in Python" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="733" />
                      <option name="theoryId" value="8925" />
                      <option name="title" value="Queue in Python" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="3">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="904" />
                      <option name="theoryId" value="9998" />
                      <option name="title" value="Template tags" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="539" />
                      <option name="theoryId" value="7271" />
                      <option name="title" value="Block-level elements" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="552" />
                      <option name="theoryId" value="7527" />
                      <option name="title" value="HTML attributes id and class" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="478" />
                      <option name="theoryId" value="6560" />
                      <option name="title" value="HTML forms" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="4">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="506" />
                      <option name="theoryId" value="6911" />
                      <option name="title" value="Domains" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="544" />
                      <option name="theoryId" value="7332" />
                      <option name="title" value="Submitting data" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="905" />
                      <option name="theoryId" value="10006" />
                      <option name="title" value="Template filters" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
            </map>
          </option>
          <option name="updateDate" value="0" />
          <option name="hyperskillProject">
            <HyperskillProject>
              <option name="description" value="Web services are particularly useful when it comes to structuring and organizing things. What needs structure more than a crowd of waiting customers? With the help of Django, you'll implement an application that manages the line at a car service center." />
              <option name="id" value="85" />
              <option name="ideFiles" value="https://stepik.org/media/attachments/lesson/268504/additional_files.json" />
              <option name="language" value="python" />
              <option name="templateBased" value="false" />
              <option name="title" value="Hypercar Service Center" />
              <option name="useIde" value="true" />
            </HyperskillProject>
          </option>
          <option name="items">
            <list>
              <FrameworkLesson>
                <option name="currentTaskIndex" value="4" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Hypercar Service Center" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" value="stage1" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Hypercar Ltd is a not-so-famous car manufacturer. Last year was a very prospective one for the company: they doubled the profit and sold about 10k cars! Every Hypercar sometimes needs to be fixed or checked-up, so the company also opened several service centers. Soon managers noticed that the operational process is not optimal for customers, so they need a web-application for a queue management system and they want &lt;em&gt;you&lt;/em&gt; to implement this service.&lt;/p&gt;&#10;&#10;&lt;p&gt;You start working on the &lt;em&gt;&quot;hypercar&quot;&lt;/em&gt; Django project with the &quot;&lt;em&gt;tickets&quot;&lt;/em&gt; application. You will make a server that creates new tickets for customers and ensures the correct order of the queue.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;At first, we want to greet all the customers, so please implement the welcome page for an application with a particular message.&lt;/p&gt;&#10;&#10;&lt;p&gt;To emphasize the text create an &lt;code class=&quot;language-html&quot;&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; element with the content &quot;&lt;em&gt;Welcome to the Hypercar service!&lt;/em&gt;&quot;:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;h2&amp;gt;Welcome to the Hypercar Service!&amp;lt;/h2&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;The project will have several URLs for different tasks, so please make this page available at &quot;&lt;em&gt;&amp;lt;base_url&amp;gt;/welcome&lt;/em&gt;&quot;, where &lt;em&gt;&amp;lt;base_url&amp;gt;&lt;/em&gt; is the host. If you start the application on your computer with &lt;code class=&quot;language-html&quot;&gt;python manage.py runserver&lt;/code&gt; command, the host is &lt;em&gt;localhost:8000&lt;/em&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;If the server returns the page at the address &quot;&lt;em&gt;http://localhost:8000/welcome&quot;, &lt;/em&gt;you can be sure it works fine!&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/85/stages/470/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7694" />
                      <option name="index" value="1" />
                      <option name="name" value="Welcome" />
                      <option name="record" value="1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from urllib.error import URLError&#10;from urllib.request import urlopen&#10;from hstest.check_result import CheckResult&#10;from hstest.test_case import TestCase&#10;from hstest.django_test import DjangoTest&#10;&#10;&#10;class HypercarWelcomeToServiceTest(DjangoTest):&#10;&#10;    def get_welcome_page(self) -&gt; CheckResult:&#10;        try:&#10;            main_page = self.read_page(f'http://localhost:{self.port}/welcome')&#10;            if 'Welcome to the Hypercar Service!' in main_page:&#10;                return CheckResult.true()&#10;            return CheckResult.false(&#10;                'Main page should contain &quot;Welcome to the Hypercar Service!&quot; line'&#10;            )&#10;        except URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the /welcome page.'&#10;            )&#10;&#10;    def generate(self):&#10;        return [&#10;            TestCase(attach=self.check_server),&#10;            TestCase(attach=self.get_welcome_page),&#10;        ]&#10;&#10;    def check(self, reply, attach):&#10;        return attach()&#10;&#10;&#10;if __name__ == '__main__':&#10;    HypercarWelcomeToServiceTest('hypercar.manage').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/check_result.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/check_result.py" />
                                <option name="text" value="class CheckResult:&#10;&#10;    def __init__(self, result: bool, feedback: str):&#10;        self.result = result&#10;        self.feedback = feedback&#10;&#10;    @staticmethod&#10;    def true():&#10;        return CheckResult(True, '')&#10;&#10;    @staticmethod&#10;    def false(feedback: str = ''):&#10;        return CheckResult(False, feedback)&#10;&#10;&#10;def wrong(feedback: str = '') -&gt; CheckResult:&#10;    return CheckResult.false(feedback)&#10;&#10;&#10;def accept():&#10;    return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/django_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/django_test.py" />
                                <option name="text" value="import os&#10;import sys&#10;import signal&#10;import subprocess&#10;from time import sleep&#10;from urllib.error import URLError, HTTPError&#10;from urllib.request import urlopen&#10;from hstest.stage_test import StageTest&#10;from hstest.check_result import CheckResult&#10;&#10;&#10;class DjangoTest(StageTest):&#10;&#10;    _kill = os.kill&#10;    port = '0'&#10;    tryout_ports = ['8000', '8001', '8002', '8003', '8004']&#10;    process = None&#10;&#10;    def run(self):&#10;        if self.process is None:&#10;            self.__find_free_port()&#10;            self.process = subprocess.Popen([&#10;                sys.executable, self.file_to_test,&#10;                'runserver', self.port, '--noreload',&#10;            ])&#10;&#10;    def check_server(self):&#10;        if self.port == '0':&#10;            return CheckResult.false(&#10;                f'Please free one of the ports: {&quot;, &quot;.join(self.tryout_ports)}'&#10;            )&#10;&#10;        for _ in range(15):&#10;            try:&#10;                urlopen(f'http://localhost:{self.port}/not-existing-link-by-default')&#10;                return CheckResult.true()&#10;            except URLError as err:&#10;                if isinstance(err, HTTPError):&#10;                    return CheckResult.true()&#10;                sleep(1)&#10;        else:&#10;            return CheckResult.false(&#10;                'Cannot start the ./manage.py runserver for 15 seconds'&#10;            )&#10;&#10;    def __find_free_port(self):&#10;        for port in self.tryout_ports:&#10;            try:&#10;                urlopen(f'http://localhost:{port}')&#10;            except URLError as err:&#10;                if isinstance(err.reason, ConnectionRefusedError):&#10;                    self.port = port&#10;                    break&#10;&#10;    def read_page(self, link: str) -&gt; str:&#10;        return urlopen(link).read().decode().replace('\u00a0', ' ')&#10;&#10;    def after_all_tests(self):&#10;        if self.process is not None:&#10;            try:&#10;                self._kill(self.process.pid, signal.SIGINT)&#10;            except ProcessLookupError:&#10;                pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/exceptions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/exceptions.py" />
                                <option name="text" value="&#10;class BadSolutionException(Exception):&#10;    def __init__(self, message):&#10;        self.message = message&#10;&#10;&#10;class SyntaxException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class ExitException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/stage_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/stage_test.py" />
                                <option name="text" value="import sys&#10;import runpy&#10;import os&#10;import io&#10;import importlib&#10;import signal&#10;import builtins&#10;import traceback&#10;from typing import List, Any, Dict&#10;from hstest.test_helper import *&#10;from hstest.test_case import TestCase&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import *&#10;&#10;&#10;class StageTest:&#10;&#10;    real_stdin = None&#10;    real_print = None&#10;    real_input = None&#10;    user_output: io.StringIO = None&#10;&#10;    @staticmethod&#10;    def remove_kill_methods():&#10;        os.kill = lambda *x, **y: exit(0)&#10;        os._exit = lambda *x, **y: exit(0)&#10;        os.killpg = lambda *x, **y: exit(0)&#10;        signal.pthread_kill = lambda *x, **y: exit(0)&#10;        signal.siginterrupt = lambda *x, **y: exit(0)&#10;&#10;    @staticmethod&#10;    def set_input(user_input: str):&#10;        sys.stdin = io.StringIO(user_input)&#10;&#10;    @staticmethod&#10;    def add_input(user_input: str):&#10;        sys.stdin: io.StringIO&#10;        curr_position = sys.stdin.seek(0, io.SEEK_CUR)&#10;        sys.stdin.seek(0)&#10;        sys.stdin = io.StringIO(sys.stdin.read() + user_input)&#10;        sys.stdin.seek(curr_position)&#10;&#10;    @staticmethod&#10;    def print(*args, **kwargs):&#10;        StageTest.real_print(*args, **kwargs)&#10;        StageTest.real_print(*args, **kwargs, file=StageTest.user_output)&#10;&#10;    @staticmethod&#10;    def input(arg=''):&#10;        StageTest.print(arg, end='')&#10;        user_input = StageTest.real_input()&#10;        # StageTest.print()&#10;        return user_input&#10;&#10;    @staticmethod&#10;    def replace_globals():&#10;        StageTest.real_stdin = sys.stdin&#10;        StageTest.real_print = builtins.print&#10;        StageTest.real_input = builtins.input&#10;        builtins.print = StageTest.print&#10;        builtins.input = StageTest.input&#10;&#10;    @staticmethod&#10;    def get_print_back():&#10;        builtins.print = StageTest.real_print&#10;        sys.stdin = StageTest.real_stdin&#10;&#10;    def __init__(self, module_to_test: str):&#10;        self.remove_kill_methods()&#10;        self.replace_globals()&#10;        self.module_to_test = module_to_test&#10;        self.this_test_file = __file__&#10;        self.file_to_test = module_to_test.replace('.', os.sep) + '.py'&#10;        self.full_file_to_test = ''&#10;        self.tests: List[TestCase] = []&#10;&#10;    def reset(self):&#10;        StageTest.user_output = io.StringIO()&#10;        top_module = self.module_to_test[:self.module_to_test.index('.')]&#10;        for name, module in list(sys.modules.items()):&#10;            if name.startswith(top_module):&#10;                importlib.reload(module)&#10;&#10;    @staticmethod&#10;    def create_files(files: Dict[str, str]):&#10;        for file, content in files.items():&#10;            with open(file, 'w') as f:&#10;                f.write(content)&#10;&#10;    @staticmethod&#10;    def delete_files(files: Dict[str, str]):&#10;        for file in files.keys():&#10;            if os.path.isfile(file):&#10;                os.remove(file)&#10;&#10;    def run(self):&#10;        runpy.run_module(&#10;            self.module_to_test,&#10;            run_name=&quot;__main__&quot;&#10;        )&#10;&#10;    def test(self, test_case: TestCase) -&gt; str:&#10;        self.reset()&#10;        try:&#10;            self.create_files(test_case.files)&#10;            sys.argv = [self.file_to_test] + test_case.args&#10;            self.set_input(test_case.input)&#10;            self.run()&#10;            self.delete_files(test_case.files)&#10;            return StageTest.user_output.getvalue()&#10;&#10;        except SyntaxError as e:&#10;&#10;            file = e.filename&#10;            file = file.replace(os.sep, '.')&#10;            file = file[file.index(self.module_to_test):-3]&#10;            file = file.replace('.', os.sep) + '.py'&#10;&#10;            output = f'File &quot;{file}&quot;, line {e.lineno}\n' \&#10;                     + e.text.strip()[: e.offset-1] + '\n' \&#10;                     'SyntaxError: invalid syntax'&#10;&#10;            # '`' * (e.offset - 2) + '^'&#10;&#10;            raise SyntaxException(output)&#10;&#10;        except (SystemExit, KeyboardInterrupt):&#10;            raise ExitException('Tried to exit.')&#10;&#10;    def generate(self) -&gt; List[TestCase]:&#10;        raise NotImplemented&#10;&#10;    def check(self, reply: str, attach: Any) -&gt; CheckResult:&#10;        raise NotImplemented&#10;&#10;    def after_all_tests(self):&#10;        pass&#10;&#10;    def get_stacktrace(self, hide_internals, skipped_traces=0):&#10;&#10;        if self.full_file_to_test != '':&#10;            common_prefix = os.path.commonpath([&#10;                self.full_file_to_test, self.this_test_file&#10;            ])&#10;        else:&#10;            common_prefix = ''&#10;&#10;        exc_type, exc_obj, exc_tb = sys.exc_info()&#10;&#10;        if hide_internals and skipped_traces != 0:&#10;            traceback_msg = 'Traceback (most recent call last):\n'&#10;        else:&#10;            traceback_msg = ''&#10;&#10;        for line in traceback.TracebackException(&#10;                type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):&#10;            if not hide_internals:&#10;                traceback_msg += line&#10;            elif skipped_traces &gt;= 0:&#10;                skipped_traces -= 1&#10;            elif self.this_test_file not in line:&#10;                traceback_msg += line.replace(common_prefix + os.sep, '')&#10;&#10;        return traceback_msg&#10;&#10;    def run_tests(self):&#10;&#10;        test_number = 0&#10;        try:&#10;            for test in self.generate():&#10;                test_number += 1&#10;                reply = self.test(test)&#10;                result = self.check(reply, test.attach)&#10;                if not result.result:&#10;                    fail_msg = f'Wrong answer in test #{test_number}'&#10;                    self.get_print_back()&#10;                    failed(fail_msg + '\n\n' + result.feedback)&#10;                    break&#10;            passed()&#10;&#10;        except SyntaxException as ex:&#10;            self.get_print_back()&#10;            failed(ex.message)&#10;&#10;        except ExitException as ex:&#10;            error_msg = f'Error in test #{test_number}'&#10;            self.get_print_back()&#10;            failed(error_msg + '\n\n' + ex.message)&#10;&#10;        except Exception:&#10;&#10;            exc_type, exc_obj, exc_tb = sys.exc_info()&#10;            trace_frames = []&#10;&#10;            user_trace_started = False&#10;            skipped_traces = 0&#10;            while exc_tb is not None:&#10;                code = exc_tb.tb_frame.f_code&#10;                filename = code.co_filename&#10;&#10;                if filename.endswith(self.file_to_test) and not user_trace_started:&#10;                    user_trace_started = True&#10;                    self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename&#10;&#10;                if user_trace_started:&#10;                    trace_frames += [exc_tb.tb_frame.f_code]&#10;                else:&#10;                    skipped_traces += 1&#10;&#10;                exc_tb = exc_tb.tb_next&#10;&#10;            if not trace_frames:&#10;                exception_msg = (&#10;                        f&quot;Fatal error in test #{test_number}, &quot; +&#10;                        &quot;please send the report to support@hyperskill.org&quot;&#10;                )&#10;                stacktrace = self.get_stacktrace(hide_internals=False)&#10;&#10;            else:&#10;                exception_msg = f'Exception in test #{test_number}'&#10;                stacktrace = self.get_stacktrace(&#10;                    hide_internals=True,&#10;                    skipped_traces=skipped_traces&#10;                )&#10;&#10;            self.get_print_back()&#10;            failed(exception_msg + '\n\n' + stacktrace)&#10;        finally:&#10;            self.after_all_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_case.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_case.py" />
                                <option name="text" value="from typing import List, Dict, Any, Tuple, Callable&#10;&#10;&#10;class TestCase:&#10;&#10;    def __init__(self, *, stdin='', args=None,&#10;                 attach=None, files=None, copy_to_attach=False,&#10;                 attach_callback=None):&#10;        self.input: str = stdin&#10;        self.args: List[str] = [] if args is None else args&#10;        self.attach: Any = attach&#10;        self.attach_callback: Callable = attach_callback&#10;        self.files: Dict[str, str] = {} if files is None else files&#10;        if copy_to_attach:&#10;            self.attach = stdin&#10;&#10;    @staticmethod&#10;    def from_stepik(stepik_tests: List[Tuple[str, Any]]) -&gt; List['TestCase']:&#10;        hs_tests = []&#10;        for test in stepik_tests:&#10;            hs_test = TestCase()&#10;            if type(test) in (list, tuple):&#10;                hs_test.input = test[0]&#10;                hs_test.attach = test[1]&#10;            elif type(test) is str:&#10;                hs_test.input = test&#10;            else:&#10;                raise ValueError(&quot;Bad test: &quot; + str(test))&#10;            hs_tests += [hs_test]&#10;        return hs_tests&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_helper.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_helper.py" />
                                <option name="text" value="&#10;def set_congratulation_message(message):&#10;    &quot;&quot;&quot; Overrides default 'Congratulations!' message &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin CONGRATS_MESSAGE &quot; + message)&#10;&#10;&#10;def failed(message: str):&#10;    &quot;&quot;&quot; Reports failure &quot;&quot;&quot;&#10;    lines = message.splitlines()&#10;    print(&quot;\n#educational_plugin FAILED + &quot; + lines[0])&#10;    for line in lines[1:]:&#10;        print(&quot;#educational_plugin &quot; + line)&#10;&#10;&#10;def passed():&#10;    &quot;&quot;&quot; Reports success &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin test OK&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypercar/tickets/views.py" />
                                <option name="text" value="from django.views import View&#10;from django.http.response import HttpResponse&#10;&#10;&#10;class WelcomeView(View):&#10;    def get(self, request, *args, **kwargs):&#10;        return HttpResponse('')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/urls.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/urls.py" />
                                <option name="text" value="&quot;&quot;&quot;hypercar URL Configuration&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/2.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.urls import path&#10;from tickets.views import WelcomeView&#10;&#10;&#10;urlpatterns = [&#10;    path('welcome/', WelcomeView.as_view()),&#10;]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/wsgi.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/wsgi.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;WSGI config for hypercar project.&#10;&#10;It exposes the WSGI callable as a module-level variable named ``application``.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;from django.core.wsgi import get_wsgi_application&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypercar.settings')&#10;&#10;application = get_wsgi_application()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/settings.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/settings.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;Django settings for hypercar project.&#10;&#10;Generated by 'django-admin startproject' using Django 2.2.6.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/2.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = '_^m1$hfk6a^^)zbdize#nwxya@kc9q^@$kzpzzwz!_+l#(5y0%'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'tickets',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'hypercar.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'hypercar.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),&#10;    }&#10;}&#10;&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/2.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_L10N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/2.2/howto/static-files/&#10;&#10;STATIC_URL = '/static/'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/manage.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/manage.py" />
                                <option name="text" value="#!/usr/bin/env python&#10;&quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot;&#10;import os&#10;import sys&#10;&#10;&#10;def main():&#10;    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypercar.settings')&#10;    try:&#10;        from django.core.management import execute_from_command_line&#10;    except ImportError as exc:&#10;        raise ImportError(&#10;            &quot;Couldn't import Django. Are you sure it's installed and &quot;&#10;            &quot;available on your PYTHONPATH environment variable? Did you &quot;&#10;            &quot;forget to activate a virtual environment?&quot;&#10;        ) from exc&#10;    execute_from_command_line(sys.argv)&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class TicketsConfig(AppConfig):&#10;    name = 'tickets'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/db.sqlite3">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/db.sqlite3" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage2" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In the Hypercar service center customers can always find help with three problems:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;Change oil&lt;/li&gt;&#10;&#9;&lt;li&gt;Inflate tires&lt;/li&gt;&#10;&#9;&lt;li&gt;Get diagnostic test&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;To be able to make a choice, a customer should have a menu. Each paragraph in the menu is the descriptions of the service. After clicking on an item the client is redirected to the proper page for getting a ticket, so use special HTML elements to prepare these links.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;Now your task is to make a menu page with three &lt;code class=&quot;language-html&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements with the &lt;code class=&quot;language-html&quot;&gt;href&lt;/code&gt; attribute equal to &lt;em&gt;&quot;/get_ticket/change_oil&quot;, &quot;/get_ticket/inflate_tires&quot;, &quot;/get_ticket/diagnostic&lt;/em&gt;&quot; accordingly:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a target=&quot;_blank&quot; href=&quot;/get_ticket/inflate_tires&quot;&amp;gt;Inflate tires&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Take the description for each link from the list above.&lt;/p&gt;&#10;&#10;&lt;p&gt;The menu page should be available on &quot;&lt;em&gt;&amp;lt;base_url&amp;gt;/menu&lt;/em&gt;&quot;, where &lt;em&gt;&amp;lt;base_url&amp;gt;&lt;/em&gt; is the host. To combine a &lt;a target=&quot;_blank&quot; href=&quot;https://docs.djangoproject.com/en/2.2/topics/class-based-views/intro/#handling-forms-with-class-based-views&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;template with the HTTP handler&lt;/a&gt; you can use &lt;code class=&quot;language-html&quot;&gt;django.shortcuts.render&lt;/code&gt; function. To pass any arguments to template add the dictionary to the &lt;code class=&quot;language-html&quot;&gt;render&lt;/code&gt;:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;render(request, template_name, {'name_you_use_in_template': your_variable})&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;You should not implement handlers for these pages: you'll do it at the next step.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/85/stages/471/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7695" />
                      <option name="index" value="2" />
                      <option name="name" value="Customer menu" />
                      <option name="record" value="2" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="hypercar/tickets/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypercar/tickets/views.py" />
                                <option name="text" value="from django.views import View&#10;from django.http.response import HttpResponse&#10;&#10;&#10;class WelcomeView(View):&#10;    def get(self, request, *args, **kwargs):&#10;        return HttpResponse('')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/urls.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypercar/hypercar/urls.py" />
                                <option name="text" value="&quot;&quot;&quot;hypercar URL Configuration&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/2.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.urls import path&#10;from tickets.views import WelcomeView&#10;&#10;&#10;urlpatterns = [&#10;    path('welcome/', WelcomeView.as_view()),&#10;]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/wsgi.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/wsgi.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;WSGI config for hypercar project.&#10;&#10;It exposes the WSGI callable as a module-level variable named ``application``.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;from django.core.wsgi import get_wsgi_application&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypercar.settings')&#10;&#10;application = get_wsgi_application()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/settings.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/settings.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;Django settings for hypercar project.&#10;&#10;Generated by 'django-admin startproject' using Django 2.2.6.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/2.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = '_^m1$hfk6a^^)zbdize#nwxya@kc9q^@$kzpzzwz!_+l#(5y0%'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'tickets',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'hypercar.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'hypercar.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),&#10;    }&#10;}&#10;&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/2.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_L10N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/2.2/howto/static-files/&#10;&#10;STATIC_URL = '/static/'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/manage.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/manage.py" />
                                <option name="text" value="#!/usr/bin/env python&#10;&quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot;&#10;import os&#10;import sys&#10;&#10;&#10;def main():&#10;    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypercar.settings')&#10;    try:&#10;        from django.core.management import execute_from_command_line&#10;    except ImportError as exc:&#10;        raise ImportError(&#10;            &quot;Couldn't import Django. Are you sure it's installed and &quot;&#10;            &quot;available on your PYTHONPATH environment variable? Did you &quot;&#10;            &quot;forget to activate a virtual environment?&quot;&#10;        ) from exc&#10;    execute_from_command_line(sys.argv)&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class TicketsConfig(AppConfig):&#10;    name = 'tickets'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="import re&#10;from urllib.error import URLError&#10;from urllib.request import urlopen&#10;from hstest.check_result import CheckResult&#10;from hstest.test_case import TestCase&#10;from hstest.django_test import DjangoTest&#10;&#10;&#10;class HypercarClientMenuTest(DjangoTest):&#10;    ELEMENT_PATTERN = '''&lt;a[^&gt;]+href=['&quot;](?P&lt;href&gt;[a-zA-Z/_]+)['&quot;][^&gt;]*&gt;'''&#10;&#10;    def get_client_menu_page(self) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/menu')&#10;            links = re.findall(self.ELEMENT_PATTERN, page)&#10;            for link in (&#10;                '/get_ticket/change_oil',&#10;                '/get_ticket/inflate_tires',&#10;                '/get_ticket/diagnostic',&#10;            ):&#10;                if link not in links:&#10;                    return CheckResult.false(&#10;                        f'Menu page should contain &lt;a&gt; element with href {link}'&#10;                    )&#10;            return CheckResult.true()&#10;        except URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the /menu page.'&#10;            )&#10;&#10;    def generate(self):&#10;        return [&#10;            TestCase(attach=self.check_server),&#10;            TestCase(attach=self.get_client_menu_page),&#10;        ]&#10;&#10;    def check(self, reply, attach):&#10;        return attach()&#10;&#10;&#10;if __name__ == '__main__':&#10;    HypercarClientMenuTest('hypercar.manage').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/check_result.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/check_result.py" />
                                <option name="text" value="class CheckResult:&#10;&#10;    def __init__(self, result: bool, feedback: str):&#10;        self.result = result&#10;        self.feedback = feedback&#10;&#10;    @staticmethod&#10;    def true():&#10;        return CheckResult(True, '')&#10;&#10;    @staticmethod&#10;    def false(feedback: str = ''):&#10;        return CheckResult(False, feedback)&#10;&#10;&#10;def wrong(feedback: str = '') -&gt; CheckResult:&#10;    return CheckResult.false(feedback)&#10;&#10;&#10;def accept():&#10;    return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/django_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/django_test.py" />
                                <option name="text" value="import os&#10;import sys&#10;import signal&#10;import subprocess&#10;from time import sleep&#10;from urllib.error import URLError, HTTPError&#10;from urllib.request import urlopen&#10;from hstest.stage_test import StageTest&#10;from hstest.check_result import CheckResult&#10;&#10;&#10;class DjangoTest(StageTest):&#10;&#10;    _kill = os.kill&#10;    port = '0'&#10;    tryout_ports = ['8000', '8001', '8002', '8003', '8004']&#10;    process = None&#10;&#10;    def run(self):&#10;        if self.process is None:&#10;            self.__find_free_port()&#10;            self.process = subprocess.Popen([&#10;                sys.executable, self.file_to_test,&#10;                'runserver', self.port, '--noreload',&#10;            ])&#10;&#10;    def check_server(self):&#10;        if self.port == '0':&#10;            return CheckResult.false(&#10;                f'Please free one of the ports: {&quot;, &quot;.join(self.tryout_ports)}'&#10;            )&#10;&#10;        for _ in range(15):&#10;            try:&#10;                urlopen(f'http://localhost:{self.port}/not-existing-link-by-default')&#10;                return CheckResult.true()&#10;            except URLError as err:&#10;                if isinstance(err, HTTPError):&#10;                    return CheckResult.true()&#10;                sleep(1)&#10;        else:&#10;            return CheckResult.false(&#10;                'Cannot start the ./manage.py runserver for 15 seconds'&#10;            )&#10;&#10;    def __find_free_port(self):&#10;        for port in self.tryout_ports:&#10;            try:&#10;                urlopen(f'http://localhost:{port}')&#10;            except URLError as err:&#10;                if isinstance(err.reason, ConnectionRefusedError):&#10;                    self.port = port&#10;                    break&#10;&#10;    def read_page(self, link: str) -&gt; str:&#10;        return urlopen(link).read().decode().replace('\u00a0', ' ')&#10;&#10;    def after_all_tests(self):&#10;        if self.process is not None:&#10;            try:&#10;                self._kill(self.process.pid, signal.SIGINT)&#10;            except ProcessLookupError:&#10;                pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/exceptions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/exceptions.py" />
                                <option name="text" value="&#10;class BadSolutionException(Exception):&#10;    def __init__(self, message):&#10;        self.message = message&#10;&#10;&#10;class SyntaxException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class ExitException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/stage_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/stage_test.py" />
                                <option name="text" value="import sys&#10;import runpy&#10;import os&#10;import io&#10;import importlib&#10;import signal&#10;import builtins&#10;import traceback&#10;from typing import List, Any, Dict&#10;from hstest.test_helper import *&#10;from hstest.test_case import TestCase&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import *&#10;&#10;&#10;class StageTest:&#10;&#10;    real_stdin = None&#10;    real_print = None&#10;    real_input = None&#10;    user_output: io.StringIO = None&#10;&#10;    @staticmethod&#10;    def remove_kill_methods():&#10;        os.kill = lambda *x, **y: exit(0)&#10;        os._exit = lambda *x, **y: exit(0)&#10;        os.killpg = lambda *x, **y: exit(0)&#10;        signal.pthread_kill = lambda *x, **y: exit(0)&#10;        signal.siginterrupt = lambda *x, **y: exit(0)&#10;&#10;    @staticmethod&#10;    def set_input(user_input: str):&#10;        sys.stdin = io.StringIO(user_input)&#10;&#10;    @staticmethod&#10;    def add_input(user_input: str):&#10;        sys.stdin: io.StringIO&#10;        curr_position = sys.stdin.seek(0, io.SEEK_CUR)&#10;        sys.stdin.seek(0)&#10;        sys.stdin = io.StringIO(sys.stdin.read() + user_input)&#10;        sys.stdin.seek(curr_position)&#10;&#10;    @staticmethod&#10;    def print(*args, **kwargs):&#10;        StageTest.real_print(*args, **kwargs)&#10;        StageTest.real_print(*args, **kwargs, file=StageTest.user_output)&#10;&#10;    @staticmethod&#10;    def input(arg=''):&#10;        StageTest.print(arg, end='')&#10;        user_input = StageTest.real_input()&#10;        # StageTest.print()&#10;        return user_input&#10;&#10;    @staticmethod&#10;    def replace_globals():&#10;        StageTest.real_stdin = sys.stdin&#10;        StageTest.real_print = builtins.print&#10;        StageTest.real_input = builtins.input&#10;        builtins.print = StageTest.print&#10;        builtins.input = StageTest.input&#10;&#10;    @staticmethod&#10;    def get_print_back():&#10;        builtins.print = StageTest.real_print&#10;        sys.stdin = StageTest.real_stdin&#10;&#10;    def __init__(self, module_to_test: str):&#10;        self.remove_kill_methods()&#10;        self.replace_globals()&#10;        self.module_to_test = module_to_test&#10;        self.this_test_file = __file__&#10;        self.file_to_test = module_to_test.replace('.', os.sep) + '.py'&#10;        self.full_file_to_test = ''&#10;        self.tests: List[TestCase] = []&#10;&#10;    def reset(self):&#10;        StageTest.user_output = io.StringIO()&#10;        top_module = self.module_to_test[:self.module_to_test.index('.')]&#10;        for name, module in list(sys.modules.items()):&#10;            if name.startswith(top_module):&#10;                importlib.reload(module)&#10;&#10;    @staticmethod&#10;    def create_files(files: Dict[str, str]):&#10;        for file, content in files.items():&#10;            with open(file, 'w') as f:&#10;                f.write(content)&#10;&#10;    @staticmethod&#10;    def delete_files(files: Dict[str, str]):&#10;        for file in files.keys():&#10;            if os.path.isfile(file):&#10;                os.remove(file)&#10;&#10;    def run(self):&#10;        runpy.run_module(&#10;            self.module_to_test,&#10;            run_name=&quot;__main__&quot;&#10;        )&#10;&#10;    def test(self, test_case: TestCase) -&gt; str:&#10;        self.reset()&#10;        try:&#10;            self.create_files(test_case.files)&#10;            sys.argv = [self.file_to_test] + test_case.args&#10;            self.set_input(test_case.input)&#10;            self.run()&#10;            self.delete_files(test_case.files)&#10;            return StageTest.user_output.getvalue()&#10;&#10;        except SyntaxError as e:&#10;&#10;            file = e.filename&#10;            file = file.replace(os.sep, '.')&#10;            file = file[file.index(self.module_to_test):-3]&#10;            file = file.replace('.', os.sep) + '.py'&#10;&#10;            output = f'File &quot;{file}&quot;, line {e.lineno}\n' \&#10;                     + e.text.strip()[: e.offset-1] + '\n' \&#10;                     'SyntaxError: invalid syntax'&#10;&#10;            # '`' * (e.offset - 2) + '^'&#10;&#10;            raise SyntaxException(output)&#10;&#10;        except (SystemExit, KeyboardInterrupt):&#10;            raise ExitException('Tried to exit.')&#10;&#10;    def generate(self) -&gt; List[TestCase]:&#10;        raise NotImplemented&#10;&#10;    def check(self, reply: str, attach: Any) -&gt; CheckResult:&#10;        raise NotImplemented&#10;&#10;    def after_all_tests(self):&#10;        pass&#10;&#10;    def get_stacktrace(self, hide_internals, skipped_traces=0):&#10;&#10;        if self.full_file_to_test != '':&#10;            common_prefix = os.path.commonpath([&#10;                self.full_file_to_test, self.this_test_file&#10;            ])&#10;        else:&#10;            common_prefix = ''&#10;&#10;        exc_type, exc_obj, exc_tb = sys.exc_info()&#10;&#10;        if hide_internals and skipped_traces != 0:&#10;            traceback_msg = 'Traceback (most recent call last):\n'&#10;        else:&#10;            traceback_msg = ''&#10;&#10;        for line in traceback.TracebackException(&#10;                type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):&#10;            if not hide_internals:&#10;                traceback_msg += line&#10;            elif skipped_traces &gt;= 0:&#10;                skipped_traces -= 1&#10;            elif self.this_test_file not in line:&#10;                traceback_msg += line.replace(common_prefix + os.sep, '')&#10;&#10;        return traceback_msg&#10;&#10;    def run_tests(self):&#10;&#10;        test_number = 0&#10;        try:&#10;            for test in self.generate():&#10;                test_number += 1&#10;                reply = self.test(test)&#10;                result = self.check(reply, test.attach)&#10;                if not result.result:&#10;                    fail_msg = f'Wrong answer in test #{test_number}'&#10;                    self.get_print_back()&#10;                    failed(fail_msg + '\n\n' + result.feedback)&#10;                    break&#10;            passed()&#10;&#10;        except SyntaxException as ex:&#10;            self.get_print_back()&#10;            failed(ex.message)&#10;&#10;        except ExitException as ex:&#10;            error_msg = f'Error in test #{test_number}'&#10;            self.get_print_back()&#10;            failed(error_msg + '\n\n' + ex.message)&#10;&#10;        except Exception:&#10;&#10;            exc_type, exc_obj, exc_tb = sys.exc_info()&#10;            trace_frames = []&#10;&#10;            user_trace_started = False&#10;            skipped_traces = 0&#10;            while exc_tb is not None:&#10;                code = exc_tb.tb_frame.f_code&#10;                filename = code.co_filename&#10;&#10;                if filename.endswith(self.file_to_test) and not user_trace_started:&#10;                    user_trace_started = True&#10;                    self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename&#10;&#10;                if user_trace_started:&#10;                    trace_frames += [exc_tb.tb_frame.f_code]&#10;                else:&#10;                    skipped_traces += 1&#10;&#10;                exc_tb = exc_tb.tb_next&#10;&#10;            if not trace_frames:&#10;                exception_msg = (&#10;                        f&quot;Fatal error in test #{test_number}, &quot; +&#10;                        &quot;please send the report to support@hyperskill.org&quot;&#10;                )&#10;                stacktrace = self.get_stacktrace(hide_internals=False)&#10;&#10;            else:&#10;                exception_msg = f'Exception in test #{test_number}'&#10;                stacktrace = self.get_stacktrace(&#10;                    hide_internals=True,&#10;                    skipped_traces=skipped_traces&#10;                )&#10;&#10;            self.get_print_back()&#10;            failed(exception_msg + '\n\n' + stacktrace)&#10;        finally:&#10;            self.after_all_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_case.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_case.py" />
                                <option name="text" value="from typing import List, Dict, Any, Tuple, Callable&#10;&#10;&#10;class TestCase:&#10;&#10;    def __init__(self, *, stdin='', args=None,&#10;                 attach=None, files=None, copy_to_attach=False,&#10;                 attach_callback=None):&#10;        self.input: str = stdin&#10;        self.args: List[str] = [] if args is None else args&#10;        self.attach: Any = attach&#10;        self.attach_callback: Callable = attach_callback&#10;        self.files: Dict[str, str] = {} if files is None else files&#10;        if copy_to_attach:&#10;            self.attach = stdin&#10;&#10;    @staticmethod&#10;    def from_stepik(stepik_tests: List[Tuple[str, Any]]) -&gt; List['TestCase']:&#10;        hs_tests = []&#10;        for test in stepik_tests:&#10;            hs_test = TestCase()&#10;            if type(test) in (list, tuple):&#10;                hs_test.input = test[0]&#10;                hs_test.attach = test[1]&#10;            elif type(test) is str:&#10;                hs_test.input = test&#10;            else:&#10;                raise ValueError(&quot;Bad test: &quot; + str(test))&#10;            hs_tests += [hs_test]&#10;        return hs_tests&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_helper.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_helper.py" />
                                <option name="text" value="&#10;def set_congratulation_message(message):&#10;    &quot;&quot;&quot; Overrides default 'Congratulations!' message &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin CONGRATS_MESSAGE &quot; + message)&#10;&#10;&#10;def failed(message: str):&#10;    &quot;&quot;&quot; Reports failure &quot;&quot;&quot;&#10;    lines = message.splitlines()&#10;    print(&quot;\n#educational_plugin FAILED + &quot; + lines[0])&#10;    for line in lines[1:]:&#10;        print(&quot;#educational_plugin &quot; + line)&#10;&#10;&#10;def passed():&#10;    &quot;&quot;&quot; Reports success &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin test OK&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/templates/tickets/menu.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypercar/tickets/templates/tickets/menu.html" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage3" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Every day at the center there are two or three hard-working mechanics and they take clients in the order they are coming. Sometimes the line becomes really long when customers drive in at the same time. Usually, the diagnostic test takes &lt;strong&gt;30 minutes&lt;/strong&gt;, inflating the tires &lt;strong&gt;5 minutes&lt;/strong&gt; and changing the oil about &lt;strong&gt;2 minutes&lt;/strong&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;The company conducts a survey and come to the conclusion: the longer the service takes, the longer the client agrees to wait. That's why a new algorithm of processing should be implemented:&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;&#9;&lt;li&gt;As long as there are clients in the line waiting to change oil, they are served first;&lt;/li&gt;&#10;&#9;&lt;li&gt;The ones who want to inflate tires are served next&lt;/li&gt;&#10;&#9;&lt;li&gt;The clients who come to get diagnostics go last&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;To distinguish one ticket from another we should choose a number for it. Starting from 1 and getting next in increasing order is the expected solution from you. Not all the clients agree to wait long, so give them the estimated time before their turn. Do not forget that you have a particular order of processing the line.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;Your task is to create a handler that gives tickets to the clients. The handler should serve &lt;em&gt;GET&lt;/em&gt; requests on URLs:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;&lt;em&gt;&amp;lt;base_url&amp;gt;/get_ticket/change_oil&lt;/em&gt;&lt;/li&gt;&#10;&#9;&lt;li&gt;&lt;em&gt;&amp;lt;base_url&amp;gt;/get_ticket/inflate_tires&lt;/em&gt;&lt;/li&gt;&#10;&#9;&lt;li&gt;&lt;em&gt;&amp;lt;base_url&amp;gt;/get_ticket/diagnostic&lt;/em&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;On a page there should be a &lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element with the content &quot;&lt;em&gt;Your number is &amp;lt;ticket_number&amp;gt;&lt;/em&gt;&quot;, where the &lt;em&gt;&amp;lt;ticket_number&amp;gt;&lt;/em&gt; is an id of a ticket. To calculate estimated time, sum up the time of processing all the tickets before the given one according to the algorithm above. The estimated time should be in a &lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element with content &quot;&lt;em&gt;Please wait around &amp;lt;minutes_to_wait&amp;gt; minutes&lt;/em&gt;&quot; where &lt;em&gt;&amp;lt;minutes_to_wait&amp;gt;&lt;/em&gt; is the number of estimated minutes:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;Your number is 7&amp;lt;/div&amp;gt;&#10;&amp;lt;div&amp;gt;Please wait around 49 minutes&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;div class=&quot;alert alert-primary&quot;&gt; To store the data, you may use Python dictionaries and lists. For example, you can create a dictionary &lt;code class=&quot;language-html&quot;&gt;line_of_cars&lt;/code&gt; with the keys matching service names and values having a list of customers' tickets. &lt;/div&gt;&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Examples&lt;/h2&gt;&#10;&#10;&lt;p&gt;If you have 2 clients coming to change oil, 3 clients waiting to inflate tires and one to get diagnostics, the estimated time for the next customer would be:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;to change oil is 2 * &lt;strong&gt;2 minutes&lt;/strong&gt; = 4 minutes&lt;/li&gt;&#10;&#9;&lt;li&gt;to inflate tires is 2 * &lt;strong&gt;2 minutes&lt;/strong&gt; + 3 * &lt;strong&gt;5 minutes&lt;/strong&gt; = 19 minutes&lt;/li&gt;&#10;&#9;&lt;li&gt;to get diagnostics 2 * &lt;strong&gt;2 minutes&lt;/strong&gt; + 3 * &lt;strong&gt;5 minutes&lt;/strong&gt; + 1 * &lt;strong&gt;30 minutes&lt;/strong&gt; = 49 minutes&lt;/li&gt;&#10;&lt;/ul&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/85/stages/472/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7696" />
                      <option name="index" value="3" />
                      <option name="name" value="Electronic queue" />
                      <option name="record" value="3" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="hypercar/tickets/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypercar/tickets/views.py" />
                                <option name="text" value="from django.views import View&#10;from django.http.response import HttpResponse&#10;&#10;&#10;class WelcomeView(View):&#10;    def get(self, request, *args, **kwargs):&#10;        return HttpResponse('')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/urls.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypercar/hypercar/urls.py" />
                                <option name="text" value="&quot;&quot;&quot;hypercar URL Configuration&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/2.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.urls import path&#10;from tickets.views import WelcomeView&#10;&#10;&#10;urlpatterns = [&#10;    path('welcome/', WelcomeView.as_view()),&#10;]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/wsgi.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/wsgi.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;WSGI config for hypercar project.&#10;&#10;It exposes the WSGI callable as a module-level variable named ``application``.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;from django.core.wsgi import get_wsgi_application&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypercar.settings')&#10;&#10;application = get_wsgi_application()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/settings.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/settings.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;Django settings for hypercar project.&#10;&#10;Generated by 'django-admin startproject' using Django 2.2.6.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/2.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = '_^m1$hfk6a^^)zbdize#nwxya@kc9q^@$kzpzzwz!_+l#(5y0%'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'tickets',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'hypercar.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'hypercar.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),&#10;    }&#10;}&#10;&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/2.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_L10N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/2.2/howto/static-files/&#10;&#10;STATIC_URL = '/static/'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/manage.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/manage.py" />
                                <option name="text" value="#!/usr/bin/env python&#10;&quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot;&#10;import os&#10;import sys&#10;&#10;&#10;def main():&#10;    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypercar.settings')&#10;    try:&#10;        from django.core.management import execute_from_command_line&#10;    except ImportError as exc:&#10;        raise ImportError(&#10;            &quot;Couldn't import Django. Are you sure it's installed and &quot;&#10;            &quot;available on your PYTHONPATH environment variable? Did you &quot;&#10;            &quot;forget to activate a virtual environment?&quot;&#10;        ) from exc&#10;    execute_from_command_line(sys.argv)&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class TicketsConfig(AppConfig):&#10;    name = 'tickets'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from functools import partial&#10;from urllib.error import URLError&#10;from urllib.request import urlopen&#10;from hstest.check_result import CheckResult&#10;from hstest.test_case import TestCase&#10;from hstest.django_test import DjangoTest&#10;&#10;&#10;class HypercarElecronicQueueTest(DjangoTest):&#10;&#10;    def get_ticket(self, service: str, content: str, helper_msg: str) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/get_ticket/{service}')&#10;            if content in page:&#10;                return CheckResult.true()&#10;            else:&#10;                return CheckResult.false(&#10;                    f'Expected to have {content} on /get_ticket/{service} page after\n'&#10;                    f'{helper_msg}'&#10;                )&#10;        except URLError:&#10;            return CheckResult.false(&#10;                f'Cannot connect to the /get_ticket/{service} page.'&#10;            )&#10;&#10;    def generate(self):&#10;        helper_msg_1 = '\tClient #1 get ticket for inflating tires\n'&#10;        helper_msg_2 = helper_msg_1 + '\tClient #2 get ticket for changing oil\n'&#10;        helper_msg_3 = helper_msg_2 + '\tClient #3 get ticket for changing oil\n'&#10;        helper_msg_4 = helper_msg_3 + '\tClient #4 get ticket for inflating tires\n'&#10;        helper_msg_5 = helper_msg_4 + '\tClient #5 get ticket for diagnostic\n'&#10;        return [&#10;            TestCase(attach=self.check_server),&#10;            TestCase(attach=partial(&#10;                self.get_ticket,&#10;                'inflate_tires',&#10;                'Please wait around 0 minutes',&#10;                helper_msg_1&#10;            )),&#10;            TestCase(attach=partial(&#10;                self.get_ticket,&#10;                'change_oil',&#10;                'Please wait around 0 minutes',&#10;                helper_msg_2&#10;            )),&#10;            TestCase(attach=partial(&#10;                self.get_ticket,&#10;                'change_oil',&#10;                'Please wait around 2 minutes',&#10;                helper_msg_3&#10;            )),&#10;            TestCase(attach=partial(&#10;                self.get_ticket,&#10;                'inflate_tires',&#10;                'Please wait around 9 minutes',&#10;                helper_msg_4&#10;            )),&#10;            TestCase(attach=partial(&#10;                self.get_ticket,&#10;                'diagnostic',&#10;                'Please wait around 14 minutes',&#10;                helper_msg_5&#10;            )),&#10;        ]&#10;&#10;    def check(self, reply, attach):&#10;        return attach()&#10;&#10;&#10;if __name__ == '__main__':&#10;    HypercarElecronicQueueTest('hypercar.manage').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/check_result.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/check_result.py" />
                                <option name="text" value="class CheckResult:&#10;&#10;    def __init__(self, result: bool, feedback: str):&#10;        self.result = result&#10;        self.feedback = feedback&#10;&#10;    @staticmethod&#10;    def true():&#10;        return CheckResult(True, '')&#10;&#10;    @staticmethod&#10;    def false(feedback: str = ''):&#10;        return CheckResult(False, feedback)&#10;&#10;&#10;def wrong(feedback: str = '') -&gt; CheckResult:&#10;    return CheckResult.false(feedback)&#10;&#10;&#10;def accept():&#10;    return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/django_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/django_test.py" />
                                <option name="text" value="import os&#10;import sys&#10;import signal&#10;import subprocess&#10;from time import sleep&#10;from urllib.error import URLError, HTTPError&#10;from urllib.request import urlopen&#10;from hstest.stage_test import StageTest&#10;from hstest.check_result import CheckResult&#10;&#10;&#10;class DjangoTest(StageTest):&#10;&#10;    _kill = os.kill&#10;    port = '0'&#10;    tryout_ports = ['8000', '8001', '8002', '8003', '8004']&#10;    process = None&#10;&#10;    def run(self):&#10;        if self.process is None:&#10;            self.__find_free_port()&#10;            self.process = subprocess.Popen([&#10;                sys.executable, self.file_to_test,&#10;                'runserver', self.port, '--noreload',&#10;            ])&#10;&#10;    def check_server(self):&#10;        if self.port == '0':&#10;            return CheckResult.false(&#10;                f'Please free one of the ports: {&quot;, &quot;.join(self.tryout_ports)}'&#10;            )&#10;&#10;        for _ in range(15):&#10;            try:&#10;                urlopen(f'http://localhost:{self.port}/not-existing-link-by-default')&#10;                return CheckResult.true()&#10;            except URLError as err:&#10;                if isinstance(err, HTTPError):&#10;                    return CheckResult.true()&#10;                sleep(1)&#10;        else:&#10;            return CheckResult.false(&#10;                'Cannot start the ./manage.py runserver for 15 seconds'&#10;            )&#10;&#10;    def __find_free_port(self):&#10;        for port in self.tryout_ports:&#10;            try:&#10;                urlopen(f'http://localhost:{port}')&#10;            except URLError as err:&#10;                if isinstance(err.reason, ConnectionRefusedError):&#10;                    self.port = port&#10;                    break&#10;&#10;    def read_page(self, link: str) -&gt; str:&#10;        return urlopen(link).read().decode().replace('\u00a0', ' ')&#10;&#10;    def after_all_tests(self):&#10;        if self.process is not None:&#10;            try:&#10;                self._kill(self.process.pid, signal.SIGINT)&#10;            except ProcessLookupError:&#10;                pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/exceptions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/exceptions.py" />
                                <option name="text" value="&#10;class BadSolutionException(Exception):&#10;    def __init__(self, message):&#10;        self.message = message&#10;&#10;&#10;class SyntaxException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class ExitException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/stage_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/stage_test.py" />
                                <option name="text" value="import sys&#10;import runpy&#10;import os&#10;import io&#10;import importlib&#10;import signal&#10;import builtins&#10;import traceback&#10;from typing import List, Any, Dict&#10;from hstest.test_helper import *&#10;from hstest.test_case import TestCase&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import *&#10;&#10;&#10;class StageTest:&#10;&#10;    real_stdin = None&#10;    real_print = None&#10;    real_input = None&#10;    user_output: io.StringIO = None&#10;&#10;    @staticmethod&#10;    def remove_kill_methods():&#10;        os.kill = lambda *x, **y: exit(0)&#10;        os._exit = lambda *x, **y: exit(0)&#10;        os.killpg = lambda *x, **y: exit(0)&#10;        signal.pthread_kill = lambda *x, **y: exit(0)&#10;        signal.siginterrupt = lambda *x, **y: exit(0)&#10;&#10;    @staticmethod&#10;    def set_input(user_input: str):&#10;        sys.stdin = io.StringIO(user_input)&#10;&#10;    @staticmethod&#10;    def add_input(user_input: str):&#10;        sys.stdin: io.StringIO&#10;        curr_position = sys.stdin.seek(0, io.SEEK_CUR)&#10;        sys.stdin.seek(0)&#10;        sys.stdin = io.StringIO(sys.stdin.read() + user_input)&#10;        sys.stdin.seek(curr_position)&#10;&#10;    @staticmethod&#10;    def print(*args, **kwargs):&#10;        StageTest.real_print(*args, **kwargs)&#10;        StageTest.real_print(*args, **kwargs, file=StageTest.user_output)&#10;&#10;    @staticmethod&#10;    def input(arg=''):&#10;        StageTest.print(arg, end='')&#10;        user_input = StageTest.real_input()&#10;        # StageTest.print()&#10;        return user_input&#10;&#10;    @staticmethod&#10;    def replace_globals():&#10;        StageTest.real_stdin = sys.stdin&#10;        StageTest.real_print = builtins.print&#10;        StageTest.real_input = builtins.input&#10;        builtins.print = StageTest.print&#10;        builtins.input = StageTest.input&#10;&#10;    @staticmethod&#10;    def get_print_back():&#10;        builtins.print = StageTest.real_print&#10;        sys.stdin = StageTest.real_stdin&#10;&#10;    def __init__(self, module_to_test: str):&#10;        self.remove_kill_methods()&#10;        self.replace_globals()&#10;        self.module_to_test = module_to_test&#10;        self.this_test_file = __file__&#10;        self.file_to_test = module_to_test.replace('.', os.sep) + '.py'&#10;        self.full_file_to_test = ''&#10;        self.tests: List[TestCase] = []&#10;&#10;    def reset(self):&#10;        StageTest.user_output = io.StringIO()&#10;        top_module = self.module_to_test[:self.module_to_test.index('.')]&#10;        for name, module in list(sys.modules.items()):&#10;            if name.startswith(top_module):&#10;                importlib.reload(module)&#10;&#10;    @staticmethod&#10;    def create_files(files: Dict[str, str]):&#10;        for file, content in files.items():&#10;            with open(file, 'w') as f:&#10;                f.write(content)&#10;&#10;    @staticmethod&#10;    def delete_files(files: Dict[str, str]):&#10;        for file in files.keys():&#10;            if os.path.isfile(file):&#10;                os.remove(file)&#10;&#10;    def run(self):&#10;        runpy.run_module(&#10;            self.module_to_test,&#10;            run_name=&quot;__main__&quot;&#10;        )&#10;&#10;    def test(self, test_case: TestCase) -&gt; str:&#10;        self.reset()&#10;        try:&#10;            self.create_files(test_case.files)&#10;            sys.argv = [self.file_to_test] + test_case.args&#10;            self.set_input(test_case.input)&#10;            self.run()&#10;            self.delete_files(test_case.files)&#10;            return StageTest.user_output.getvalue()&#10;&#10;        except SyntaxError as e:&#10;&#10;            file = e.filename&#10;            file = file.replace(os.sep, '.')&#10;            file = file[file.index(self.module_to_test):-3]&#10;            file = file.replace('.', os.sep) + '.py'&#10;&#10;            output = f'File &quot;{file}&quot;, line {e.lineno}\n' \&#10;                     + e.text.strip()[: e.offset-1] + '\n' \&#10;                     'SyntaxError: invalid syntax'&#10;&#10;            # '`' * (e.offset - 2) + '^'&#10;&#10;            raise SyntaxException(output)&#10;&#10;        except (SystemExit, KeyboardInterrupt):&#10;            raise ExitException('Tried to exit.')&#10;&#10;    def generate(self) -&gt; List[TestCase]:&#10;        raise NotImplemented&#10;&#10;    def check(self, reply: str, attach: Any) -&gt; CheckResult:&#10;        raise NotImplemented&#10;&#10;    def after_all_tests(self):&#10;        pass&#10;&#10;    def get_stacktrace(self, hide_internals, skipped_traces=0):&#10;&#10;        if self.full_file_to_test != '':&#10;            common_prefix = os.path.commonpath([&#10;                self.full_file_to_test, self.this_test_file&#10;            ])&#10;        else:&#10;            common_prefix = ''&#10;&#10;        exc_type, exc_obj, exc_tb = sys.exc_info()&#10;&#10;        if hide_internals and skipped_traces != 0:&#10;            traceback_msg = 'Traceback (most recent call last):\n'&#10;        else:&#10;            traceback_msg = ''&#10;&#10;        for line in traceback.TracebackException(&#10;                type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):&#10;            if not hide_internals:&#10;                traceback_msg += line&#10;            elif skipped_traces &gt;= 0:&#10;                skipped_traces -= 1&#10;            elif self.this_test_file not in line:&#10;                traceback_msg += line.replace(common_prefix + os.sep, '')&#10;&#10;        return traceback_msg&#10;&#10;    def run_tests(self):&#10;&#10;        test_number = 0&#10;        try:&#10;            for test in self.generate():&#10;                test_number += 1&#10;                reply = self.test(test)&#10;                result = self.check(reply, test.attach)&#10;                if not result.result:&#10;                    fail_msg = f'Wrong answer in test #{test_number}'&#10;                    self.get_print_back()&#10;                    failed(fail_msg + '\n\n' + result.feedback)&#10;                    break&#10;            passed()&#10;&#10;        except SyntaxException as ex:&#10;            self.get_print_back()&#10;            failed(ex.message)&#10;&#10;        except ExitException as ex:&#10;            error_msg = f'Error in test #{test_number}'&#10;            self.get_print_back()&#10;            failed(error_msg + '\n\n' + ex.message)&#10;&#10;        except Exception:&#10;&#10;            exc_type, exc_obj, exc_tb = sys.exc_info()&#10;            trace_frames = []&#10;&#10;            user_trace_started = False&#10;            skipped_traces = 0&#10;            while exc_tb is not None:&#10;                code = exc_tb.tb_frame.f_code&#10;                filename = code.co_filename&#10;&#10;                if filename.endswith(self.file_to_test) and not user_trace_started:&#10;                    user_trace_started = True&#10;                    self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename&#10;&#10;                if user_trace_started:&#10;                    trace_frames += [exc_tb.tb_frame.f_code]&#10;                else:&#10;                    skipped_traces += 1&#10;&#10;                exc_tb = exc_tb.tb_next&#10;&#10;            if not trace_frames:&#10;                exception_msg = (&#10;                        f&quot;Fatal error in test #{test_number}, &quot; +&#10;                        &quot;please send the report to support@hyperskill.org&quot;&#10;                )&#10;                stacktrace = self.get_stacktrace(hide_internals=False)&#10;&#10;            else:&#10;                exception_msg = f'Exception in test #{test_number}'&#10;                stacktrace = self.get_stacktrace(&#10;                    hide_internals=True,&#10;                    skipped_traces=skipped_traces&#10;                )&#10;&#10;            self.get_print_back()&#10;            failed(exception_msg + '\n\n' + stacktrace)&#10;        finally:&#10;            self.after_all_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_case.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_case.py" />
                                <option name="text" value="from typing import List, Dict, Any, Tuple, Callable&#10;&#10;&#10;class TestCase:&#10;&#10;    def __init__(self, *, stdin='', args=None,&#10;                 attach=None, files=None, copy_to_attach=False,&#10;                 attach_callback=None):&#10;        self.input: str = stdin&#10;        self.args: List[str] = [] if args is None else args&#10;        self.attach: Any = attach&#10;        self.attach_callback: Callable = attach_callback&#10;        self.files: Dict[str, str] = {} if files is None else files&#10;        if copy_to_attach:&#10;            self.attach = stdin&#10;&#10;    @staticmethod&#10;    def from_stepik(stepik_tests: List[Tuple[str, Any]]) -&gt; List['TestCase']:&#10;        hs_tests = []&#10;        for test in stepik_tests:&#10;            hs_test = TestCase()&#10;            if type(test) in (list, tuple):&#10;                hs_test.input = test[0]&#10;                hs_test.attach = test[1]&#10;            elif type(test) is str:&#10;                hs_test.input = test&#10;            else:&#10;                raise ValueError(&quot;Bad test: &quot; + str(test))&#10;            hs_tests += [hs_test]&#10;        return hs_tests&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_helper.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_helper.py" />
                                <option name="text" value="&#10;def set_congratulation_message(message):&#10;    &quot;&quot;&quot; Overrides default 'Congratulations!' message &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin CONGRATS_MESSAGE &quot; + message)&#10;&#10;&#10;def failed(message: str):&#10;    &quot;&quot;&quot; Reports failure &quot;&quot;&quot;&#10;    lines = message.splitlines()&#10;    print(&quot;\n#educational_plugin FAILED + &quot; + lines[0])&#10;    for line in lines[1:]:&#10;        print(&quot;#educational_plugin &quot; + line)&#10;&#10;&#10;def passed():&#10;    &quot;&quot;&quot; Reports success &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin test OK&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/templates/tickets/menu.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/templates/tickets/menu.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Menu&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;a href=&quot;/get_ticket/change_oil&quot;&gt;Change oil&lt;/a&gt;&#10;    &lt;a href=&quot;/get_ticket/inflate_tires&quot;&gt;Inflate tires&lt;/a&gt;&#10;    &lt;a href=&quot;/get_ticket/diagnostic&quot;&gt;Get diagnostic test&lt;/a&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/templates/tickets/ticket.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypercar/tickets/templates/tickets/ticket.html" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage4" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;The service you're making is almost ready for customers, but you should also make it handy for operators who process the orders. They want to see the current length of each queue. If lengths are 3, 4 and 1, the content of each paragraph will be:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;Change oil queue: 3&lt;/li&gt;&#10;&#9;&lt;li&gt;Inflate tires queue: 4&lt;/li&gt;&#10;&#9;&lt;li&gt;Get diagnostic queue: 1&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;Another action they want to make is to choose when to process the next client. The simple button for this operation will serve great.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;Please add three &lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements with content from the list above. The last element on a page should be a &lt;code class=&quot;language-html&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt; with the &lt;code class=&quot;language-html&quot;&gt;method&lt;/code&gt; attribute equal to &quot;&lt;em&gt;post&lt;/em&gt;&quot;.&lt;/p&gt;&#10;&#10;&lt;p&gt;The form should contain a &lt;code class=&quot;language-html&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element with the &lt;code class=&quot;language-html&quot;&gt;type&lt;/code&gt; attribute equal to &quot;&lt;em&gt;submit&lt;/em&gt;&quot;. The label of the button is &quot;&lt;em&gt;Process next&lt;/em&gt;&quot;:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;Change oil queue: 3&amp;lt;/div&amp;gt;&#10;&amp;lt;div&amp;gt;Inflate tires queue: 4&amp;lt;/div&amp;gt;&#10;&amp;lt;div&amp;gt;Get diagnostic queue: 1&amp;lt;/div&amp;gt;&#10;&#10;&amp;lt;form method=&quot;post&quot;&amp;gt;{% csrf_token %}&#10;  &amp;lt;button type=&quot;submit&quot;&amp;gt;Process next&amp;lt;/button&amp;gt;&#10;&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Do not implement the handler for the form action: you'll do it at the next step.&lt;/p&gt;&#10;&#10;&lt;p&gt;The page with the operator menu should be available at &quot;&lt;em&gt;&amp;lt;base_url&amp;gt;/processing&lt;/em&gt;&quot;, where &lt;em&gt;&amp;lt;base_url&amp;gt;&lt;/em&gt; is the host.&lt;/p&gt;&#10;&#10;&lt;p&gt;Pay attention, that the processing URL does not contain a slash at the end, so your URL pattern should not too. You can redirect GET requests to the right page with help or &lt;code class=&quot;language-html&quot;&gt;RedirectView&lt;/code&gt; if you need to:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from django.views.generic import RedirectView&#10;&#10;urlpatterns = [&#10;   # some other patterns&#10;   path('processing/', RedirectView.as_view(url='/processing'))&#10;]&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/85/stages/473/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7697" />
                      <option name="index" value="4" />
                      <option name="name" value="Operator menu" />
                      <option name="record" value="4" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="hypercar/tickets/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypercar/tickets/views.py" />
                                <option name="text" value="from django.views import View&#10;from django.http.response import HttpResponse&#10;&#10;&#10;class WelcomeView(View):&#10;    def get(self, request, *args, **kwargs):&#10;        return HttpResponse('')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/urls.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypercar/hypercar/urls.py" />
                                <option name="text" value="&quot;&quot;&quot;hypercar URL Configuration&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/2.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.urls import path&#10;from tickets.views import WelcomeView&#10;&#10;&#10;urlpatterns = [&#10;    path('welcome/', WelcomeView.as_view()),&#10;]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/wsgi.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/wsgi.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;WSGI config for hypercar project.&#10;&#10;It exposes the WSGI callable as a module-level variable named ``application``.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;from django.core.wsgi import get_wsgi_application&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypercar.settings')&#10;&#10;application = get_wsgi_application()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/settings.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/settings.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;Django settings for hypercar project.&#10;&#10;Generated by 'django-admin startproject' using Django 2.2.6.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/2.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = '_^m1$hfk6a^^)zbdize#nwxya@kc9q^@$kzpzzwz!_+l#(5y0%'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'tickets',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'hypercar.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'hypercar.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),&#10;    }&#10;}&#10;&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/2.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_L10N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/2.2/howto/static-files/&#10;&#10;STATIC_URL = '/static/'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/manage.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/manage.py" />
                                <option name="text" value="#!/usr/bin/env python&#10;&quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot;&#10;import os&#10;import sys&#10;&#10;&#10;def main():&#10;    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypercar.settings')&#10;    try:&#10;        from django.core.management import execute_from_command_line&#10;    except ImportError as exc:&#10;        raise ImportError(&#10;            &quot;Couldn't import Django. Are you sure it's installed and &quot;&#10;            &quot;available on your PYTHONPATH environment variable? Did you &quot;&#10;            &quot;forget to activate a virtual environment?&quot;&#10;        ) from exc&#10;    execute_from_command_line(sys.argv)&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class TicketsConfig(AppConfig):&#10;    name = 'tickets'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from functools import partial&#10;from urllib.error import URLError&#10;from urllib.request import urlopen&#10;from hstest.check_result import CheckResult&#10;from hstest.test_case import TestCase&#10;from hstest.django_test import DjangoTest&#10;&#10;&#10;class HypercarOperatorMenuTest(DjangoTest):&#10;&#10;    def get_ticket(self, service: str, content: str, helper_msg: str) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/get_ticket/{service}')&#10;            if content in page:&#10;                return CheckResult.true()&#10;            else:&#10;                return CheckResult.false(&#10;                    f'Expected to have {content} on /get_ticket/{service} page after\n'&#10;                    f'{helper_msg}'&#10;                )&#10;        except URLError:&#10;            return CheckResult.false(&#10;                f'Cannot connect to the /get_ticket/{service} page.'&#10;            )&#10;&#10;    def check_menu(self, service: str, content: str, menu_content: str,&#10;                   helper_msg: str) -&gt; CheckResult:&#10;        try:&#10;            result = self.get_ticket(service, content, helper_msg)&#10;            if not result.result:&#10;                return result&#10;&#10;            page = self.read_page(f'http://localhost:{self.port}/processing')&#10;            if menu_content in page:&#10;                return CheckResult.true()&#10;            else:&#10;                return CheckResult.false(&#10;                    f'Expected to have {menu_content} on /processing page after\n'&#10;                    f'{helper_msg}'&#10;                )&#10;        except URLError:&#10;            return CheckResult.false(&#10;                f'Cannot connect to the /processing page.'&#10;            )&#10;&#10;    def generate(self):&#10;        helper_msg_1 = '\tClient #1 get ticket for inflating tires\n'&#10;        helper_msg_2 = helper_msg_1 + '\tClient #2 get ticket for changing oil\n'&#10;        helper_msg_3 = helper_msg_2 + '\tClient #3 get ticket for changing oil\n'&#10;        helper_msg_4 = helper_msg_3 + '\tClient #4 get ticket for inflating tires\n'&#10;        helper_msg_5 = helper_msg_4 + '\tClient #5 get ticket for diagnostic\n'&#10;        return [&#10;            TestCase(attach=self.check_server),&#10;            TestCase(attach=partial(&#10;                self.check_menu,&#10;                'inflate_tires',&#10;                'Please wait around 0 minutes',&#10;                'Inflate tires queue: 1',&#10;                helper_msg_1&#10;            )),&#10;            TestCase(attach=partial(&#10;                self.check_menu,&#10;                'change_oil',&#10;                'Please wait around 0 minutes',&#10;                'Change oil queue: 1',&#10;                helper_msg_2&#10;            )),&#10;            TestCase(attach=partial(&#10;                self.check_menu,&#10;                'change_oil',&#10;                'Please wait around 2 minutes',&#10;                'Change oil queue: 2',&#10;                helper_msg_3&#10;            )),&#10;            TestCase(attach=partial(&#10;                self.check_menu,&#10;                'inflate_tires',&#10;                'Please wait around 9 minutes',&#10;                'Inflate tires queue: 2',&#10;                helper_msg_4&#10;            )),&#10;            TestCase(attach=partial(&#10;                self.check_menu,&#10;                'diagnostic',&#10;                'Please wait around 14 minutes',&#10;                'Get diagnostic queue: 1',&#10;                helper_msg_5&#10;            )),&#10;        ]&#10;&#10;    def check(self, reply, attach):&#10;        return attach()&#10;&#10;&#10;if __name__ == '__main__':&#10;    HypercarOperatorMenuTest('hypercar.manage').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/check_result.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/check_result.py" />
                                <option name="text" value="class CheckResult:&#10;&#10;    def __init__(self, result: bool, feedback: str):&#10;        self.result = result&#10;        self.feedback = feedback&#10;&#10;    @staticmethod&#10;    def true():&#10;        return CheckResult(True, '')&#10;&#10;    @staticmethod&#10;    def false(feedback: str = ''):&#10;        return CheckResult(False, feedback)&#10;&#10;&#10;def wrong(feedback: str = '') -&gt; CheckResult:&#10;    return CheckResult.false(feedback)&#10;&#10;&#10;def accept():&#10;    return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/django_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/django_test.py" />
                                <option name="text" value="import os&#10;import sys&#10;import signal&#10;import subprocess&#10;from time import sleep&#10;from urllib.error import URLError, HTTPError&#10;from urllib.request import urlopen&#10;from hstest.stage_test import StageTest&#10;from hstest.check_result import CheckResult&#10;&#10;&#10;class DjangoTest(StageTest):&#10;&#10;    _kill = os.kill&#10;    port = '0'&#10;    tryout_ports = ['8000', '8001', '8002', '8003', '8004']&#10;    process = None&#10;&#10;    def run(self):&#10;        if self.process is None:&#10;            self.__find_free_port()&#10;            self.process = subprocess.Popen([&#10;                sys.executable, self.file_to_test,&#10;                'runserver', self.port, '--noreload',&#10;            ])&#10;&#10;    def check_server(self):&#10;        if self.port == '0':&#10;            return CheckResult.false(&#10;                f'Please free one of the ports: {&quot;, &quot;.join(self.tryout_ports)}'&#10;            )&#10;&#10;        for _ in range(15):&#10;            try:&#10;                urlopen(f'http://localhost:{self.port}/not-existing-link-by-default')&#10;                return CheckResult.true()&#10;            except URLError as err:&#10;                if isinstance(err, HTTPError):&#10;                    return CheckResult.true()&#10;                sleep(1)&#10;        else:&#10;            return CheckResult.false(&#10;                'Cannot start the ./manage.py runserver for 15 seconds'&#10;            )&#10;&#10;    def __find_free_port(self):&#10;        for port in self.tryout_ports:&#10;            try:&#10;                urlopen(f'http://localhost:{port}')&#10;            except URLError as err:&#10;                if isinstance(err.reason, ConnectionRefusedError):&#10;                    self.port = port&#10;                    break&#10;&#10;    def read_page(self, link: str) -&gt; str:&#10;        return urlopen(link).read().decode().replace('\u00a0', ' ')&#10;&#10;    def after_all_tests(self):&#10;        if self.process is not None:&#10;            try:&#10;                self._kill(self.process.pid, signal.SIGINT)&#10;            except ProcessLookupError:&#10;                pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/exceptions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/exceptions.py" />
                                <option name="text" value="&#10;class BadSolutionException(Exception):&#10;    def __init__(self, message):&#10;        self.message = message&#10;&#10;&#10;class SyntaxException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class ExitException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/stage_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/stage_test.py" />
                                <option name="text" value="import sys&#10;import runpy&#10;import os&#10;import io&#10;import importlib&#10;import signal&#10;import builtins&#10;import traceback&#10;from typing import List, Any, Dict&#10;from hstest.test_helper import *&#10;from hstest.test_case import TestCase&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import *&#10;&#10;&#10;class StageTest:&#10;&#10;    real_stdin = None&#10;    real_print = None&#10;    real_input = None&#10;    user_output: io.StringIO = None&#10;&#10;    @staticmethod&#10;    def remove_kill_methods():&#10;        os.kill = lambda *x, **y: exit(0)&#10;        os._exit = lambda *x, **y: exit(0)&#10;        os.killpg = lambda *x, **y: exit(0)&#10;        signal.pthread_kill = lambda *x, **y: exit(0)&#10;        signal.siginterrupt = lambda *x, **y: exit(0)&#10;&#10;    @staticmethod&#10;    def set_input(user_input: str):&#10;        sys.stdin = io.StringIO(user_input)&#10;&#10;    @staticmethod&#10;    def add_input(user_input: str):&#10;        sys.stdin: io.StringIO&#10;        curr_position = sys.stdin.seek(0, io.SEEK_CUR)&#10;        sys.stdin.seek(0)&#10;        sys.stdin = io.StringIO(sys.stdin.read() + user_input)&#10;        sys.stdin.seek(curr_position)&#10;&#10;    @staticmethod&#10;    def print(*args, **kwargs):&#10;        StageTest.real_print(*args, **kwargs)&#10;        StageTest.real_print(*args, **kwargs, file=StageTest.user_output)&#10;&#10;    @staticmethod&#10;    def input(arg=''):&#10;        StageTest.print(arg, end='')&#10;        user_input = StageTest.real_input()&#10;        # StageTest.print()&#10;        return user_input&#10;&#10;    @staticmethod&#10;    def replace_globals():&#10;        StageTest.real_stdin = sys.stdin&#10;        StageTest.real_print = builtins.print&#10;        StageTest.real_input = builtins.input&#10;        builtins.print = StageTest.print&#10;        builtins.input = StageTest.input&#10;&#10;    @staticmethod&#10;    def get_print_back():&#10;        builtins.print = StageTest.real_print&#10;        sys.stdin = StageTest.real_stdin&#10;&#10;    def __init__(self, module_to_test: str):&#10;        self.remove_kill_methods()&#10;        self.replace_globals()&#10;        self.module_to_test = module_to_test&#10;        self.this_test_file = __file__&#10;        self.file_to_test = module_to_test.replace('.', os.sep) + '.py'&#10;        self.full_file_to_test = ''&#10;        self.tests: List[TestCase] = []&#10;&#10;    def reset(self):&#10;        StageTest.user_output = io.StringIO()&#10;        top_module = self.module_to_test[:self.module_to_test.index('.')]&#10;        for name, module in list(sys.modules.items()):&#10;            if name.startswith(top_module):&#10;                importlib.reload(module)&#10;&#10;    @staticmethod&#10;    def create_files(files: Dict[str, str]):&#10;        for file, content in files.items():&#10;            with open(file, 'w') as f:&#10;                f.write(content)&#10;&#10;    @staticmethod&#10;    def delete_files(files: Dict[str, str]):&#10;        for file in files.keys():&#10;            if os.path.isfile(file):&#10;                os.remove(file)&#10;&#10;    def run(self):&#10;        runpy.run_module(&#10;            self.module_to_test,&#10;            run_name=&quot;__main__&quot;&#10;        )&#10;&#10;    def test(self, test_case: TestCase) -&gt; str:&#10;        self.reset()&#10;        try:&#10;            self.create_files(test_case.files)&#10;            sys.argv = [self.file_to_test] + test_case.args&#10;            self.set_input(test_case.input)&#10;            self.run()&#10;            self.delete_files(test_case.files)&#10;            return StageTest.user_output.getvalue()&#10;&#10;        except SyntaxError as e:&#10;&#10;            file = e.filename&#10;            file = file.replace(os.sep, '.')&#10;            file = file[file.index(self.module_to_test):-3]&#10;            file = file.replace('.', os.sep) + '.py'&#10;&#10;            output = f'File &quot;{file}&quot;, line {e.lineno}\n' \&#10;                     + e.text.strip()[: e.offset-1] + '\n' \&#10;                     'SyntaxError: invalid syntax'&#10;&#10;            # '`' * (e.offset - 2) + '^'&#10;&#10;            raise SyntaxException(output)&#10;&#10;        except (SystemExit, KeyboardInterrupt):&#10;            raise ExitException('Tried to exit.')&#10;&#10;    def generate(self) -&gt; List[TestCase]:&#10;        raise NotImplemented&#10;&#10;    def check(self, reply: str, attach: Any) -&gt; CheckResult:&#10;        raise NotImplemented&#10;&#10;    def after_all_tests(self):&#10;        pass&#10;&#10;    def get_stacktrace(self, hide_internals, skipped_traces=0):&#10;&#10;        if self.full_file_to_test != '':&#10;            common_prefix = os.path.commonpath([&#10;                self.full_file_to_test, self.this_test_file&#10;            ])&#10;        else:&#10;            common_prefix = ''&#10;&#10;        exc_type, exc_obj, exc_tb = sys.exc_info()&#10;&#10;        if hide_internals and skipped_traces != 0:&#10;            traceback_msg = 'Traceback (most recent call last):\n'&#10;        else:&#10;            traceback_msg = ''&#10;&#10;        for line in traceback.TracebackException(&#10;                type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):&#10;            if not hide_internals:&#10;                traceback_msg += line&#10;            elif skipped_traces &gt;= 0:&#10;                skipped_traces -= 1&#10;            elif self.this_test_file not in line:&#10;                traceback_msg += line.replace(common_prefix + os.sep, '')&#10;&#10;        return traceback_msg&#10;&#10;    def run_tests(self):&#10;&#10;        test_number = 0&#10;        try:&#10;            for test in self.generate():&#10;                test_number += 1&#10;                reply = self.test(test)&#10;                result = self.check(reply, test.attach)&#10;                if not result.result:&#10;                    fail_msg = f'Wrong answer in test #{test_number}'&#10;                    self.get_print_back()&#10;                    failed(fail_msg + '\n\n' + result.feedback)&#10;                    break&#10;            passed()&#10;&#10;        except SyntaxException as ex:&#10;            self.get_print_back()&#10;            failed(ex.message)&#10;&#10;        except ExitException as ex:&#10;            error_msg = f'Error in test #{test_number}'&#10;            self.get_print_back()&#10;            failed(error_msg + '\n\n' + ex.message)&#10;&#10;        except Exception:&#10;&#10;            exc_type, exc_obj, exc_tb = sys.exc_info()&#10;            trace_frames = []&#10;&#10;            user_trace_started = False&#10;            skipped_traces = 0&#10;            while exc_tb is not None:&#10;                code = exc_tb.tb_frame.f_code&#10;                filename = code.co_filename&#10;&#10;                if filename.endswith(self.file_to_test) and not user_trace_started:&#10;                    user_trace_started = True&#10;                    self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename&#10;&#10;                if user_trace_started:&#10;                    trace_frames += [exc_tb.tb_frame.f_code]&#10;                else:&#10;                    skipped_traces += 1&#10;&#10;                exc_tb = exc_tb.tb_next&#10;&#10;            if not trace_frames:&#10;                exception_msg = (&#10;                        f&quot;Fatal error in test #{test_number}, &quot; +&#10;                        &quot;please send the report to support@hyperskill.org&quot;&#10;                )&#10;                stacktrace = self.get_stacktrace(hide_internals=False)&#10;&#10;            else:&#10;                exception_msg = f'Exception in test #{test_number}'&#10;                stacktrace = self.get_stacktrace(&#10;                    hide_internals=True,&#10;                    skipped_traces=skipped_traces&#10;                )&#10;&#10;            self.get_print_back()&#10;            failed(exception_msg + '\n\n' + stacktrace)&#10;        finally:&#10;            self.after_all_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_case.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_case.py" />
                                <option name="text" value="from typing import List, Dict, Any, Tuple, Callable&#10;&#10;&#10;class TestCase:&#10;&#10;    def __init__(self, *, stdin='', args=None,&#10;                 attach=None, files=None, copy_to_attach=False,&#10;                 attach_callback=None):&#10;        self.input: str = stdin&#10;        self.args: List[str] = [] if args is None else args&#10;        self.attach: Any = attach&#10;        self.attach_callback: Callable = attach_callback&#10;        self.files: Dict[str, str] = {} if files is None else files&#10;        if copy_to_attach:&#10;            self.attach = stdin&#10;&#10;    @staticmethod&#10;    def from_stepik(stepik_tests: List[Tuple[str, Any]]) -&gt; List['TestCase']:&#10;        hs_tests = []&#10;        for test in stepik_tests:&#10;            hs_test = TestCase()&#10;            if type(test) in (list, tuple):&#10;                hs_test.input = test[0]&#10;                hs_test.attach = test[1]&#10;            elif type(test) is str:&#10;                hs_test.input = test&#10;            else:&#10;                raise ValueError(&quot;Bad test: &quot; + str(test))&#10;            hs_tests += [hs_test]&#10;        return hs_tests&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_helper.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_helper.py" />
                                <option name="text" value="&#10;def set_congratulation_message(message):&#10;    &quot;&quot;&quot; Overrides default 'Congratulations!' message &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin CONGRATS_MESSAGE &quot; + message)&#10;&#10;&#10;def failed(message: str):&#10;    &quot;&quot;&quot; Reports failure &quot;&quot;&quot;&#10;    lines = message.splitlines()&#10;    print(&quot;\n#educational_plugin FAILED + &quot; + lines[0])&#10;    for line in lines[1:]:&#10;        print(&quot;#educational_plugin &quot; + line)&#10;&#10;&#10;def passed():&#10;    &quot;&quot;&quot; Reports success &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin test OK&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/templates/tickets/ticket.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/templates/tickets/ticket.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Ticket&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div&gt;Your number is {{ number }}&lt;/div&gt;&#10;    &lt;div&gt;Please wait around {{ time }} minutes&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/templates/tickets/menu.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/templates/tickets/menu.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Menu&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;a href=&quot;/get_ticket/change_oil&quot;&gt;Change oil&lt;/a&gt;&#10;    &lt;a href=&quot;/get_ticket/inflate_tires&quot;&gt;Inflate tires&lt;/a&gt;&#10;    &lt;a href=&quot;/get_ticket/diagnostic&quot;&gt;Get diagnostic test&lt;/a&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/templates/tickets/process.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypercar/tickets/templates/tickets/process.html" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/queue.json">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/queue.json" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage5" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;When the next client's turn is coming up, the operator should process it pushing the button. It happens when one of the mechanics has finished the work and able to serve the next client. You cannot define in the application the exact time, so leave the task to the operator.&lt;/p&gt;&#10;&#10;&lt;p&gt;When the &quot;&lt;em&gt;Process next&lt;/em&gt;&quot; button is pushed the application chooses the next client according to the algorithm's priority:&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;&#9;&lt;li&gt;Until the line of customers to change the oil is not empty, they served first&lt;/li&gt;&#10;&#9;&lt;li&gt;If &quot;&lt;em&gt;Change oil&lt;/em&gt;&quot; queue is empty the line of customers to inflate tires served next&lt;/li&gt;&#10;&#9;&lt;li&gt;Clients who want to get diagnostics served last.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;Immediately the number of chosen ticket appears on the screen for all the customers and the length of the appropriate queue become one client less. You need not save the ticket further, the only purpose of it now is to show the number on the screen.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;Your task is to make a &lt;em&gt;POST&lt;/em&gt; handler for processing the next ticket. After the request is received, remove the appropriate ticket from the queue. The handler should process &lt;em&gt;POST&lt;/em&gt; requests at &quot;&lt;em&gt;&amp;lt;base_url&amp;gt;/processing&lt;/em&gt;&quot;, where &lt;em&gt;&amp;lt;base_url&amp;gt;&lt;/em&gt; is the host.&lt;/p&gt;&#10;&#10;&lt;p&gt;Remember that you should have another handler to show information about the next ticket.&lt;/p&gt;&#10;&#10;&lt;p&gt;Add &quot;&lt;em&gt;Next ticket #&amp;lt;number_of_ticket&amp;gt;&lt;/em&gt;&quot; to the &lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element to the page that will be displayed on the screen for all the clients:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;Next ticket #7&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;If there are no tickets to process, the content of the element should be &quot;&lt;em&gt;Waiting for the next client&lt;/em&gt;&quot;:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;Waiting for the next client&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;The page with the next ticket should be available at &quot;&lt;em&gt;&amp;lt;base_url&amp;gt;/next&lt;/em&gt;&quot;, where &lt;em&gt;&amp;lt;base_url&amp;gt;&lt;/em&gt; is the host.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;div class=&quot;alert alert-warning&quot;&gt; Be cautious, URLs in the &lt;em&gt;urls.py&lt;/em&gt; module should not contain slash in the end. &lt;/div&gt;&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Assume that in some moment all the mechanics are busy and &lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;the clients with tickets &lt;strong&gt;5&lt;/strong&gt; and &lt;strong&gt;8&lt;/strong&gt; are still waiting in the queue to change the oil,&lt;/li&gt;&#10;&#9;&lt;li&gt;the client with ticket &lt;strong&gt;4&lt;/strong&gt; wants to inflate tires,&lt;/li&gt;&#10;&#9;&lt;li&gt;the client with ticket &lt;strong&gt;3&lt;/strong&gt; is waiting to get diagnostics.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;When mechanics would finish their job, the operator pushes the button and on the screen for all customers shows information:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;Next ticket #5&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;The next ticket is &lt;strong&gt;5&lt;/strong&gt; because customers changing the oil go first. So why, after &lt;strong&gt;5&lt;/strong&gt; comes &lt;strong&gt;8&lt;/strong&gt;, then &lt;strong&gt;4&lt;/strong&gt;, and the last is &lt;strong&gt;3&lt;/strong&gt;.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/85/stages/474/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="7698" />
                      <option name="index" value="5" />
                      <option name="name" value="Next, please!" />
                      <option name="record" value="-1" />
                      <option name="status" value="Failed" />
                      <option name="files">
                        <map>
                          <entry key="hypercar/tickets/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypercar/tickets/views.py" />
                                <option name="text" value="from django.views import View&#10;from django.http.response import HttpResponse&#10;&#10;&#10;class WelcomeView(View):&#10;    def get(self, request, *args, **kwargs):&#10;        return HttpResponse('')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/urls.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypercar/hypercar/urls.py" />
                                <option name="text" value="&quot;&quot;&quot;hypercar URL Configuration&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/2.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.urls import path&#10;from tickets.views import WelcomeView&#10;&#10;&#10;urlpatterns = [&#10;    path('welcome/', WelcomeView.as_view()),&#10;]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/wsgi.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/wsgi.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;WSGI config for hypercar project.&#10;&#10;It exposes the WSGI callable as a module-level variable named ``application``.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;from django.core.wsgi import get_wsgi_application&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypercar.settings')&#10;&#10;application = get_wsgi_application()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/hypercar/settings.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/hypercar/settings.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;Django settings for hypercar project.&#10;&#10;Generated by 'django-admin startproject' using Django 2.2.6.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/2.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = '_^m1$hfk6a^^)zbdize#nwxya@kc9q^@$kzpzzwz!_+l#(5y0%'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'tickets',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'hypercar.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'hypercar.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),&#10;    }&#10;}&#10;&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/2.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_L10N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/2.2/howto/static-files/&#10;&#10;STATIC_URL = '/static/'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/manage.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/manage.py" />
                                <option name="text" value="#!/usr/bin/env python&#10;&quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot;&#10;import os&#10;import sys&#10;&#10;&#10;def main():&#10;    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypercar.settings')&#10;    try:&#10;        from django.core.management import execute_from_command_line&#10;    except ImportError as exc:&#10;        raise ImportError(&#10;            &quot;Couldn't import Django. Are you sure it's installed and &quot;&#10;            &quot;available on your PYTHONPATH environment variable? Did you &quot;&#10;            &quot;forget to activate a virtual environment?&quot;&#10;        ) from exc&#10;    execute_from_command_line(sys.argv)&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class TicketsConfig(AppConfig):&#10;    name = 'tickets'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="import re&#10;from functools import partial&#10;from urllib.error import URLError, HTTPError&#10;from urllib.parse import urlencode&#10;from urllib.request import urlopen, build_opener&#10;from hstest.check_result import CheckResult&#10;from hstest.test_case import TestCase&#10;from hstest.django_test import DjangoTest&#10;&#10;&#10;class HypercarServeNextTest(DjangoTest):&#10;&#10;    def get_ticket(self, service: str, content: str, helper_msg: str) -&gt; CheckResult:&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/get_ticket/{service}')&#10;            if content in page:&#10;                return CheckResult.true()&#10;            else:&#10;                return CheckResult.false(&#10;                    f'Expected to have {content} on /get_ticket/{service} page after\n'&#10;                    f'{helper_msg}'&#10;                )&#10;        except URLError:&#10;            return CheckResult.false(&#10;                f'Cannot connect to the /get_ticket/{service} page.'&#10;            )&#10;&#10;    def check_menu(self, service: str, content: str, menu_content: str,&#10;                   helper_msg: str) -&gt; CheckResult:&#10;        try:&#10;            result = self.get_ticket(service, content, helper_msg)&#10;            if not result.result:&#10;                return result&#10;&#10;            page = self.read_page(f'http://localhost:{self.port}/processing')&#10;            if menu_content in page:&#10;                return CheckResult.true()&#10;            else:&#10;                return CheckResult.false(&#10;                    f'Expected to have {menu_content} on /processing page after\n'&#10;                    f'{helper_msg}'&#10;                )&#10;        except URLError:&#10;            return CheckResult.false(&#10;                f'Cannot connect to the /processing page.'&#10;            )&#10;&#10;    def check_next(self, service: str, content: str, menu_content: str,&#10;                   next_content: str, make_process: bool, helper_msg: str) -&gt; CheckResult:&#10;        try:&#10;            result = self.check_menu(service, content, menu_content, helper_msg)&#10;            if not result.result:&#10;                return result&#10;&#10;            if make_process:&#10;                result = self.process_ticket()&#10;                if not result.result:&#10;                    return result&#10;&#10;            page = self.read_page(f'http://localhost:{self.port}/next')&#10;&#10;            if next_content in page:&#10;                return CheckResult.true()&#10;            else:&#10;                return CheckResult.false(&#10;                    f'Expected to have {next_content} on /next page after\n'&#10;                    f'{helper_msg}'&#10;                )&#10;        except URLError:&#10;            return CheckResult.false(&#10;                f'Cannot connect to the /next page.'&#10;            )&#10;&#10;    def process_ticket(self):&#10;        response = urlopen(f'http://localhost:{self.port}/processing')&#10;        csrf_options = re.findall(&#10;            b'&lt;input[^&gt;]+value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;', response.read()&#10;        )&#10;        if not csrf_options:&#10;            return CheckResult.false(&#10;                'Add csrf_token to your form'&#10;            )&#10;        set_cookie = response.headers.get('Set-Cookie')&#10;        opener = build_opener()&#10;        opener.addheaders.append(('Cookie', set_cookie))&#10;        try:&#10;            opener.open(&#10;                f'http://localhost:{self.port}/processing',&#10;                data=urlencode({'csrfmiddlewaretoken': csrf_options[0]}).encode()&#10;            )&#10;        except HTTPError:&#10;            return CheckResult.false(&#10;                'Cannot send POST request to /processsing page'&#10;            )&#10;        return CheckResult.true()&#10;&#10;    def generate(self):&#10;        helper_msg_1 = '\tClient #1 get ticket for inflating tires\n'&#10;        helper_msg_2 = helper_msg_1 + '\tClient #2 get ticket for changing oil\n'&#10;        helper_msg_3 = helper_msg_2 + '\tClient #3 get ticket for changing oil\n'&#10;        helper_msg_3 += '\tOperator processed client\n'&#10;        helper_msg_4 = helper_msg_3 + '\tClient #4 get ticket for inflating tires\n'&#10;        helper_msg_4 += '\tOperator processed client\n'&#10;        helper_msg_5 = helper_msg_4 + '\tClient #5 get ticket for diagnostic\n'&#10;        helper_msg_5 += '\tOperator processed client\n'&#10;        return [&#10;            TestCase(attach=self.check_server),&#10;            TestCase(attach=partial(&#10;                self.check_next,&#10;                'inflate_tires',&#10;                'Please wait around 0 minutes',&#10;                'Inflate tires queue: 1',&#10;                'Waiting for the next client',&#10;                False,&#10;                helper_msg_1&#10;            )),&#10;            TestCase(attach=partial(&#10;                self.check_next,&#10;                'change_oil',&#10;                'Please wait around 0 minutes',&#10;                'Change oil queue: 1',&#10;                'Waiting for the next client',&#10;                False,&#10;                helper_msg_2&#10;            )),&#10;            TestCase(attach=partial(&#10;                self.check_next,&#10;                'change_oil',&#10;                'Please wait around 2 minutes',&#10;                'Change oil queue: 2',&#10;                'Next ticket #2',&#10;                True,&#10;                helper_msg_3&#10;            )),&#10;            TestCase(attach=partial(&#10;                self.check_next,&#10;                'inflate_tires',&#10;                'Please wait around 7 minutes',&#10;                'Inflate tires queue: 2',&#10;                'Next ticket #3',&#10;                True,&#10;                helper_msg_4&#10;            )),&#10;            TestCase(attach=partial(&#10;                self.check_next,&#10;                'diagnostic',&#10;                'Please wait around 10 minutes',&#10;                'Get diagnostic queue: 1',&#10;                'Next ticket #1',&#10;                True,&#10;                helper_msg_5&#10;            )),&#10;        ]&#10;&#10;    def check(self, reply, attach):&#10;        return attach()&#10;&#10;&#10;if __name__ == '__main__':&#10;    HypercarServeNextTest('hypercar.manage').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/check_result.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/check_result.py" />
                                <option name="text" value="class CheckResult:&#10;&#10;    def __init__(self, result: bool, feedback: str):&#10;        self.result = result&#10;        self.feedback = feedback&#10;&#10;    @staticmethod&#10;    def true():&#10;        return CheckResult(True, '')&#10;&#10;    @staticmethod&#10;    def false(feedback: str = ''):&#10;        return CheckResult(False, feedback)&#10;&#10;&#10;def wrong(feedback: str = '') -&gt; CheckResult:&#10;    return CheckResult.false(feedback)&#10;&#10;&#10;def accept():&#10;    return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/django_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/django_test.py" />
                                <option name="text" value="import os&#10;import sys&#10;import signal&#10;import subprocess&#10;from time import sleep&#10;from urllib.error import URLError, HTTPError&#10;from urllib.request import urlopen&#10;from hstest.stage_test import StageTest&#10;from hstest.check_result import CheckResult&#10;&#10;&#10;class DjangoTest(StageTest):&#10;&#10;    _kill = os.kill&#10;    port = '0'&#10;    tryout_ports = ['8000', '8001', '8002', '8003', '8004']&#10;    process = None&#10;&#10;    def run(self):&#10;        if self.process is None:&#10;            self.__find_free_port()&#10;            self.process = subprocess.Popen([&#10;                sys.executable, self.file_to_test,&#10;                'runserver', self.port, '--noreload',&#10;            ])&#10;&#10;    def check_server(self):&#10;        if self.port == '0':&#10;            return CheckResult.false(&#10;                f'Please free one of the ports: {&quot;, &quot;.join(self.tryout_ports)}'&#10;            )&#10;&#10;        for _ in range(15):&#10;            try:&#10;                urlopen(f'http://localhost:{self.port}/not-existing-link-by-default')&#10;                return CheckResult.true()&#10;            except URLError as err:&#10;                if isinstance(err, HTTPError):&#10;                    return CheckResult.true()&#10;                sleep(1)&#10;        else:&#10;            return CheckResult.false(&#10;                'Cannot start the ./manage.py runserver for 15 seconds'&#10;            )&#10;&#10;    def __find_free_port(self):&#10;        for port in self.tryout_ports:&#10;            try:&#10;                urlopen(f'http://localhost:{port}')&#10;            except URLError as err:&#10;                if isinstance(err.reason, ConnectionRefusedError):&#10;                    self.port = port&#10;                    break&#10;&#10;    def read_page(self, link: str) -&gt; str:&#10;        return urlopen(link).read().decode().replace('\u00a0', ' ')&#10;&#10;    def after_all_tests(self):&#10;        if self.process is not None:&#10;            try:&#10;                self._kill(self.process.pid, signal.SIGINT)&#10;            except ProcessLookupError:&#10;                pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/exceptions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/exceptions.py" />
                                <option name="text" value="&#10;class BadSolutionException(Exception):&#10;    def __init__(self, message):&#10;        self.message = message&#10;&#10;&#10;class SyntaxException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class ExitException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/stage_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/stage_test.py" />
                                <option name="text" value="import sys&#10;import runpy&#10;import os&#10;import io&#10;import importlib&#10;import signal&#10;import builtins&#10;import traceback&#10;from typing import List, Any, Dict&#10;from hstest.test_helper import *&#10;from hstest.test_case import TestCase&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import *&#10;&#10;&#10;class StageTest:&#10;&#10;    real_stdin = None&#10;    real_print = None&#10;    real_input = None&#10;    user_output: io.StringIO = None&#10;&#10;    @staticmethod&#10;    def remove_kill_methods():&#10;        os.kill = lambda *x, **y: exit(0)&#10;        os._exit = lambda *x, **y: exit(0)&#10;        os.killpg = lambda *x, **y: exit(0)&#10;        signal.pthread_kill = lambda *x, **y: exit(0)&#10;        signal.siginterrupt = lambda *x, **y: exit(0)&#10;&#10;    @staticmethod&#10;    def set_input(user_input: str):&#10;        sys.stdin = io.StringIO(user_input)&#10;&#10;    @staticmethod&#10;    def add_input(user_input: str):&#10;        sys.stdin: io.StringIO&#10;        curr_position = sys.stdin.seek(0, io.SEEK_CUR)&#10;        sys.stdin.seek(0)&#10;        sys.stdin = io.StringIO(sys.stdin.read() + user_input)&#10;        sys.stdin.seek(curr_position)&#10;&#10;    @staticmethod&#10;    def print(*args, **kwargs):&#10;        StageTest.real_print(*args, **kwargs)&#10;        StageTest.real_print(*args, **kwargs, file=StageTest.user_output)&#10;&#10;    @staticmethod&#10;    def input(arg=''):&#10;        StageTest.print(arg, end='')&#10;        user_input = StageTest.real_input()&#10;        # StageTest.print()&#10;        return user_input&#10;&#10;    @staticmethod&#10;    def replace_globals():&#10;        StageTest.real_stdin = sys.stdin&#10;        StageTest.real_print = builtins.print&#10;        StageTest.real_input = builtins.input&#10;        builtins.print = StageTest.print&#10;        builtins.input = StageTest.input&#10;&#10;    @staticmethod&#10;    def get_print_back():&#10;        builtins.print = StageTest.real_print&#10;        sys.stdin = StageTest.real_stdin&#10;&#10;    def __init__(self, module_to_test: str):&#10;        self.remove_kill_methods()&#10;        self.replace_globals()&#10;        self.module_to_test = module_to_test&#10;        self.this_test_file = __file__&#10;        self.file_to_test = module_to_test.replace('.', os.sep) + '.py'&#10;        self.full_file_to_test = ''&#10;        self.tests: List[TestCase] = []&#10;&#10;    def reset(self):&#10;        StageTest.user_output = io.StringIO()&#10;        top_module = self.module_to_test[:self.module_to_test.index('.')]&#10;        for name, module in list(sys.modules.items()):&#10;            if name.startswith(top_module):&#10;                importlib.reload(module)&#10;&#10;    @staticmethod&#10;    def create_files(files: Dict[str, str]):&#10;        for file, content in files.items():&#10;            with open(file, 'w') as f:&#10;                f.write(content)&#10;&#10;    @staticmethod&#10;    def delete_files(files: Dict[str, str]):&#10;        for file in files.keys():&#10;            if os.path.isfile(file):&#10;                os.remove(file)&#10;&#10;    def run(self):&#10;        runpy.run_module(&#10;            self.module_to_test,&#10;            run_name=&quot;__main__&quot;&#10;        )&#10;&#10;    def test(self, test_case: TestCase) -&gt; str:&#10;        self.reset()&#10;        try:&#10;            self.create_files(test_case.files)&#10;            sys.argv = [self.file_to_test] + test_case.args&#10;            self.set_input(test_case.input)&#10;            self.run()&#10;            self.delete_files(test_case.files)&#10;            return StageTest.user_output.getvalue()&#10;&#10;        except SyntaxError as e:&#10;&#10;            file = e.filename&#10;            file = file.replace(os.sep, '.')&#10;            file = file[file.index(self.module_to_test):-3]&#10;            file = file.replace('.', os.sep) + '.py'&#10;&#10;            output = f'File &quot;{file}&quot;, line {e.lineno}\n' \&#10;                     + e.text.strip()[: e.offset-1] + '\n' \&#10;                     'SyntaxError: invalid syntax'&#10;&#10;            # '`' * (e.offset - 2) + '^'&#10;&#10;            raise SyntaxException(output)&#10;&#10;        except (SystemExit, KeyboardInterrupt):&#10;            raise ExitException('Tried to exit.')&#10;&#10;    def generate(self) -&gt; List[TestCase]:&#10;        raise NotImplemented&#10;&#10;    def check(self, reply: str, attach: Any) -&gt; CheckResult:&#10;        raise NotImplemented&#10;&#10;    def after_all_tests(self):&#10;        pass&#10;&#10;    def get_stacktrace(self, hide_internals, skipped_traces=0):&#10;&#10;        if self.full_file_to_test != '':&#10;            common_prefix = os.path.commonpath([&#10;                self.full_file_to_test, self.this_test_file&#10;            ])&#10;        else:&#10;            common_prefix = ''&#10;&#10;        exc_type, exc_obj, exc_tb = sys.exc_info()&#10;&#10;        if hide_internals and skipped_traces != 0:&#10;            traceback_msg = 'Traceback (most recent call last):\n'&#10;        else:&#10;            traceback_msg = ''&#10;&#10;        for line in traceback.TracebackException(&#10;                type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):&#10;            if not hide_internals:&#10;                traceback_msg += line&#10;            elif skipped_traces &gt;= 0:&#10;                skipped_traces -= 1&#10;            elif self.this_test_file not in line:&#10;                traceback_msg += line.replace(common_prefix + os.sep, '')&#10;&#10;        return traceback_msg&#10;&#10;    def run_tests(self):&#10;&#10;        test_number = 0&#10;        try:&#10;            for test in self.generate():&#10;                test_number += 1&#10;                reply = self.test(test)&#10;                result = self.check(reply, test.attach)&#10;                if not result.result:&#10;                    fail_msg = f'Wrong answer in test #{test_number}'&#10;                    self.get_print_back()&#10;                    failed(fail_msg + '\n\n' + result.feedback)&#10;                    break&#10;            passed()&#10;&#10;        except SyntaxException as ex:&#10;            self.get_print_back()&#10;            failed(ex.message)&#10;&#10;        except ExitException as ex:&#10;            error_msg = f'Error in test #{test_number}'&#10;            self.get_print_back()&#10;            failed(error_msg + '\n\n' + ex.message)&#10;&#10;        except Exception:&#10;&#10;            exc_type, exc_obj, exc_tb = sys.exc_info()&#10;            trace_frames = []&#10;&#10;            user_trace_started = False&#10;            skipped_traces = 0&#10;            while exc_tb is not None:&#10;                code = exc_tb.tb_frame.f_code&#10;                filename = code.co_filename&#10;&#10;                if filename.endswith(self.file_to_test) and not user_trace_started:&#10;                    user_trace_started = True&#10;                    self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename&#10;&#10;                if user_trace_started:&#10;                    trace_frames += [exc_tb.tb_frame.f_code]&#10;                else:&#10;                    skipped_traces += 1&#10;&#10;                exc_tb = exc_tb.tb_next&#10;&#10;            if not trace_frames:&#10;                exception_msg = (&#10;                        f&quot;Fatal error in test #{test_number}, &quot; +&#10;                        &quot;please send the report to support@hyperskill.org&quot;&#10;                )&#10;                stacktrace = self.get_stacktrace(hide_internals=False)&#10;&#10;            else:&#10;                exception_msg = f'Exception in test #{test_number}'&#10;                stacktrace = self.get_stacktrace(&#10;                    hide_internals=True,&#10;                    skipped_traces=skipped_traces&#10;                )&#10;&#10;            self.get_print_back()&#10;            failed(exception_msg + '\n\n' + stacktrace)&#10;        finally:&#10;            self.after_all_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_case.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_case.py" />
                                <option name="text" value="from typing import List, Dict, Any, Tuple, Callable&#10;&#10;&#10;class TestCase:&#10;&#10;    def __init__(self, *, stdin='', args=None,&#10;                 attach=None, files=None, copy_to_attach=False,&#10;                 attach_callback=None):&#10;        self.input: str = stdin&#10;        self.args: List[str] = [] if args is None else args&#10;        self.attach: Any = attach&#10;        self.attach_callback: Callable = attach_callback&#10;        self.files: Dict[str, str] = {} if files is None else files&#10;        if copy_to_attach:&#10;            self.attach = stdin&#10;&#10;    @staticmethod&#10;    def from_stepik(stepik_tests: List[Tuple[str, Any]]) -&gt; List['TestCase']:&#10;        hs_tests = []&#10;        for test in stepik_tests:&#10;            hs_test = TestCase()&#10;            if type(test) in (list, tuple):&#10;                hs_test.input = test[0]&#10;                hs_test.attach = test[1]&#10;            elif type(test) is str:&#10;                hs_test.input = test&#10;            else:&#10;                raise ValueError(&quot;Bad test: &quot; + str(test))&#10;            hs_tests += [hs_test]&#10;        return hs_tests&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_helper.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_helper.py" />
                                <option name="text" value="&#10;def set_congratulation_message(message):&#10;    &quot;&quot;&quot; Overrides default 'Congratulations!' message &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin CONGRATS_MESSAGE &quot; + message)&#10;&#10;&#10;def failed(message: str):&#10;    &quot;&quot;&quot; Reports failure &quot;&quot;&quot;&#10;    lines = message.splitlines()&#10;    print(&quot;\n#educational_plugin FAILED + &quot; + lines[0])&#10;    for line in lines[1:]:&#10;        print(&quot;#educational_plugin &quot; + line)&#10;&#10;&#10;def passed():&#10;    &quot;&quot;&quot; Reports success &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin test OK&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/templates/tickets/ticket.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/templates/tickets/ticket.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Ticket&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div&gt;Your number is {{ number }}&lt;/div&gt;&#10;    &lt;div&gt;Please wait around {{ time }} minutes&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/templates/tickets/process.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/templates/tickets/process.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Process&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div&gt;Change oil queue: {{ change_oil }}&lt;/div&gt;&#10;    &lt;div&gt;Inflate tires queue: {{ inflate_tires }}&lt;/div&gt;&#10;    &lt;div&gt;Get diagnostic queue: {{ get_diagnostic }}&lt;/div&gt;&#10;    &lt;form method=&quot;post&quot;&gt;{% csrf_token %}&#10;      &lt;button type=&quot;submit&quot;&gt;Process next&lt;/button&gt;&#10;    &lt;/form&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/queue.json">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/queue.json" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypercar/tickets/templates/tickets/menu.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypercar/tickets/templates/tickets/menu.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Menu&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;a href=&quot;/get_ticket/change_oil&quot;&gt;Change oil&lt;/a&gt;&#10;    &lt;a href=&quot;/get_ticket/inflate_tires&quot;&gt;Inflate tires&lt;/a&gt;&#10;    &lt;a href=&quot;/get_ticket/diagnostic&quot;&gt;Get diagnostic test&lt;/a&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                  </list>
                </option>
              </FrameworkLesson>
            </list>
          </option>
        </HyperskillCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>